/* automatically generated by rust-bindgen */

pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self) -> *mut [::libc::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::libc::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<extern "C" fn(arg1:
                                                           *mut ::libc::c_void)
                                             -> ()>,
    pub __arg: *mut ::libc::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::libc::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::libc::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::libc::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __builtin_va_list;
pub type size_t = __darwin_size_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sbuf {
    pub _base: *mut ::libc::c_uchar,
    pub _size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___sFILEX { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sFILE {
    pub _p: *mut ::libc::c_uchar,
    pub _r: ::libc::c_int,
    pub _w: ::libc::c_int,
    pub _flags: ::libc::c_short,
    pub _file: ::libc::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: ::libc::c_int,
    pub _cookie: *mut ::libc::c_void,
    pub _close: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                          -> ::libc::c_int>,
    pub _read: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: *mut ::libc::c_char,
                                                   arg3: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub _seek: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: fpos_t,
                                                   arg3: ::libc::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                    arg2:
                                                        *const ::libc::c_char,
                                                    arg3: ::libc::c_int)
                                          -> ::libc::c_int>,
    pub _ub: Struct___sbuf,
    pub _extra: *mut Struct___sFILEX,
    pub _ur: ::libc::c_int,
    pub _ubuf: [::libc::c_uchar; 3usize],
    pub _nbuf: [::libc::c_uchar; 1usize],
    pub _lb: Struct___sbuf,
    pub _blksize: ::libc::c_int,
    pub _offset: fpos_t,
}
impl ::std::clone::Clone for Struct___sFILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = Struct___sFILE;
pub type off_t = __darwin_off_t;
pub type ssize_t = __darwin_ssize_t;
pub type __gnuc_va_list = __builtin_va_list;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const P_ALL: ::libc::c_uint = 0;
pub const P_PID: ::libc::c_uint = 1;
pub const P_PGID: ::libc::c_uint = 2;
pub type idtype_t = Enum_Unnamed2;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_thread_state {
    pub __eax: ::libc::c_uint,
    pub __ebx: ::libc::c_uint,
    pub __ecx: ::libc::c_uint,
    pub __edx: ::libc::c_uint,
    pub __edi: ::libc::c_uint,
    pub __esi: ::libc::c_uint,
    pub __ebp: ::libc::c_uint,
    pub __esp: ::libc::c_uint,
    pub __ss: ::libc::c_uint,
    pub __eflags: ::libc::c_uint,
    pub __eip: ::libc::c_uint,
    pub __cs: ::libc::c_uint,
    pub __ds: ::libc::c_uint,
    pub __es: ::libc::c_uint,
    pub __fs: ::libc::c_uint,
    pub __gs: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_control {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_control {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_control_t = Struct___darwin_fp_control;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_status {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_status_t = Struct___darwin_fp_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mmst_reg {
    pub __mmst_reg: [::libc::c_char; 10usize],
    pub __mmst_rsrv: [::libc::c_char; 6usize],
}
impl ::std::clone::Clone for Struct___darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mmst_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_xmm_reg {
    pub __xmm_reg: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct___darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_xmm_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_float_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_avx_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::std::clone::Clone for Struct___darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state32 {
    pub __dr0: ::libc::c_uint,
    pub __dr1: ::libc::c_uint,
    pub __dr2: ::libc::c_uint,
    pub __dr3: ::libc::c_uint,
    pub __dr4: ::libc::c_uint,
    pub __dr5: ::libc::c_uint,
    pub __dr6: ::libc::c_uint,
    pub __dr7: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_thread_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_float_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_avx_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
    pub __fpu_ymmh8: Struct___darwin_xmm_reg,
    pub __fpu_ymmh9: Struct___darwin_xmm_reg,
    pub __fpu_ymmh10: Struct___darwin_xmm_reg,
    pub __fpu_ymmh11: Struct___darwin_xmm_reg,
    pub __fpu_ymmh12: Struct___darwin_xmm_reg,
    pub __fpu_ymmh13: Struct___darwin_xmm_reg,
    pub __fpu_ymmh14: Struct___darwin_xmm_reg,
    pub __fpu_ymmh15: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_exception_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_float_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_avx_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_float_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_avx_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = *mut Struct___darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct___darwin_sigaltstack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_ucontext {
    pub uc_onstack: ::libc::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: Struct___darwin_sigaltstack,
    pub uc_link: *mut Struct___darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut Struct___darwin_mcontext64,
}
impl ::std::clone::Clone for Struct___darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct___darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_notify: ::libc::c_int,
    pub sigev_signo: ::libc::c_int,
    pub sigev_value: Union_sigval,
    pub sigev_notify_function: ::std::option::Option<extern "C" fn(arg1:
                                                                       Union_sigval)
                                                         -> ()>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___siginfo {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::libc::c_int,
    pub si_addr: *mut ::libc::c_void,
    pub si_value: Union_sigval,
    pub si_band: ::libc::c_long,
    pub __pad: [::libc::c_ulong; 7usize],
}
impl ::std::clone::Clone for Struct___siginfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___siginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct___siginfo;
#[repr(C)]
#[derive(Copy)]
pub struct Union___sigaction_u {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union___sigaction_u {
    pub unsafe fn __sa_handler(&mut self)
     -> *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                                  arg2: *mut Struct___siginfo,
                                                  arg3: *mut ::libc::c_void)
                                        -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___sigaction_u {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___sigaction_u {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_tramp: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut ::libc::c_void,
                                                      arg2: ::libc::c_int,
                                                      arg3: ::libc::c_int,
                                                      arg4: *mut siginfo_t,
                                                      arg5:
                                                          *mut ::libc::c_void)
                                            -> ()>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sig_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                              -> ()>,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigvec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_char,
    pub ss_onstack: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage {
    pub ru_utime: Struct_timeval,
    pub ru_stime: Struct_timeval,
    pub ru_maxrss: ::libc::c_long,
    pub ru_ixrss: ::libc::c_long,
    pub ru_idrss: ::libc::c_long,
    pub ru_isrss: ::libc::c_long,
    pub ru_minflt: ::libc::c_long,
    pub ru_majflt: ::libc::c_long,
    pub ru_nswap: ::libc::c_long,
    pub ru_inblock: ::libc::c_long,
    pub ru_oublock: ::libc::c_long,
    pub ru_msgsnd: ::libc::c_long,
    pub ru_msgrcv: ::libc::c_long,
    pub ru_nsignals: ::libc::c_long,
    pub ru_nvcsw: ::libc::c_long,
    pub ru_nivcsw: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_rusage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_t = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v0 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v0 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v0 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v1 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v2 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v3 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
    pub ri_cpu_time_qos_default: uint64_t,
    pub ri_cpu_time_qos_maintenance: uint64_t,
    pub ri_cpu_time_qos_background: uint64_t,
    pub ri_cpu_time_qos_utility: uint64_t,
    pub ri_cpu_time_qos_legacy: uint64_t,
    pub ri_cpu_time_qos_user_initiated: uint64_t,
    pub ri_cpu_time_qos_user_interactive: uint64_t,
    pub ri_billed_system_time: uint64_t,
    pub ri_serviced_system_time: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_current = Struct_rusage_info_v3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
impl ::std::clone::Clone for Struct_rlimit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rlimit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_proc_rlimit_control_wakeupmon {
    pub wm_flags: uint32_t,
    pub wm_rate: int32_t,
}
impl ::std::clone::Clone for Struct_proc_rlimit_control_wakeupmon {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_proc_rlimit_control_wakeupmon {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_T(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_S(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed7;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulonglong;
pub type register_t = int64_t;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::libc::c_char;
pub type daddr_t = int32_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
impl ::std::clone::Clone for Struct_fd_set {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_fd_set;
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type magick_int8_t = ::libc::c_char;
pub type magick_uint8_t = ::libc::c_uchar;
pub type magick_int16_t = ::libc::c_short;
pub type magick_uint16_t = ::libc::c_ushort;
pub type magick_int32_t = ::libc::c_int;
pub type magick_uint32_t = ::libc::c_uint;
pub type magick_int64_t = ::libc::c_long;
pub type magick_uint64_t = ::libc::c_ulong;
pub type magick_uintmax_t = ::libc::c_ulong;
pub type magick_uintptr_t = ::libc::c_ulong;
pub type magick_off_t = magick_int64_t;
pub type ImagePtr = *mut Struct__Image;
pub type _Ascii85InfoPtr_ = *mut Struct__Ascii85Info;
pub enum Struct__BlobInfo { }
pub type _BlobInfoPtr_ = *mut Struct__BlobInfo;
pub enum Struct__CacheInfo { }
pub type _CacheInfoPtr_ = *mut Struct__CacheInfo;
pub type _ImageAttributePtr_ = *mut Struct__ImageAttribute;
pub enum Struct__SemaphoreInfo { }
pub type _SemaphoreInfoPtr_ = *mut Struct__SemaphoreInfo;
pub enum Struct__ThreadViewSet { }
pub type _ThreadViewSetPtr_ = *mut Struct__ThreadViewSet;
pub type ViewInfo = *mut ::libc::c_void;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const UndefinedColorspace: ::libc::c_uint = 0;
pub const RGBColorspace: ::libc::c_uint = 1;
pub const GRAYColorspace: ::libc::c_uint = 2;
pub const TransparentColorspace: ::libc::c_uint = 3;
pub const OHTAColorspace: ::libc::c_uint = 4;
pub const XYZColorspace: ::libc::c_uint = 5;
pub const YCCColorspace: ::libc::c_uint = 6;
pub const YIQColorspace: ::libc::c_uint = 7;
pub const YPbPrColorspace: ::libc::c_uint = 8;
pub const YUVColorspace: ::libc::c_uint = 9;
pub const CMYKColorspace: ::libc::c_uint = 10;
pub const sRGBColorspace: ::libc::c_uint = 11;
pub const HSLColorspace: ::libc::c_uint = 12;
pub const HWBColorspace: ::libc::c_uint = 13;
pub const LABColorspace: ::libc::c_uint = 14;
pub const CineonLogRGBColorspace: ::libc::c_uint = 15;
pub const Rec601LumaColorspace: ::libc::c_uint = 16;
pub const Rec601YCbCrColorspace: ::libc::c_uint = 17;
pub const Rec709LumaColorspace: ::libc::c_uint = 18;
pub const Rec709YCbCrColorspace: ::libc::c_uint = 19;
pub type ColorspaceType = Enum_Unnamed8;
pub type Enum_Unnamed9 = ::libc::c_uint;
pub const UndefinedExceptionBase: ::libc::c_uint = 0;
pub const ExceptionBase: ::libc::c_uint = 1;
pub const ResourceBase: ::libc::c_uint = 2;
pub const ResourceLimitBase: ::libc::c_uint = 2;
pub const TypeBase: ::libc::c_uint = 5;
pub const AnnotateBase: ::libc::c_uint = 5;
pub const OptionBase: ::libc::c_uint = 10;
pub const DelegateBase: ::libc::c_uint = 15;
pub const MissingDelegateBase: ::libc::c_uint = 20;
pub const CorruptImageBase: ::libc::c_uint = 25;
pub const FileOpenBase: ::libc::c_uint = 30;
pub const BlobBase: ::libc::c_uint = 35;
pub const StreamBase: ::libc::c_uint = 40;
pub const CacheBase: ::libc::c_uint = 45;
pub const CoderBase: ::libc::c_uint = 50;
pub const ModuleBase: ::libc::c_uint = 55;
pub const DrawBase: ::libc::c_uint = 60;
pub const RenderBase: ::libc::c_uint = 60;
pub const ImageBase: ::libc::c_uint = 65;
pub const WandBase: ::libc::c_uint = 67;
pub const TemporaryFileBase: ::libc::c_uint = 70;
pub const TransformBase: ::libc::c_uint = 75;
pub const XServerBase: ::libc::c_uint = 80;
pub const X11Base: ::libc::c_uint = 81;
pub const UserBase: ::libc::c_uint = 82;
pub const MonitorBase: ::libc::c_uint = 85;
pub const LocaleBase: ::libc::c_uint = 86;
pub const DeprecateBase: ::libc::c_uint = 87;
pub const RegistryBase: ::libc::c_uint = 90;
pub const ConfigureBase: ::libc::c_uint = 95;
pub type ExceptionBaseType = Enum_Unnamed9;
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const UndefinedException: ::libc::c_uint = 0;
pub const EventException: ::libc::c_uint = 100;
pub const ExceptionEvent: ::libc::c_uint = 101;
pub const ResourceEvent: ::libc::c_uint = 102;
pub const ResourceLimitEvent: ::libc::c_uint = 102;
pub const TypeEvent: ::libc::c_uint = 105;
pub const AnnotateEvent: ::libc::c_uint = 105;
pub const OptionEvent: ::libc::c_uint = 110;
pub const DelegateEvent: ::libc::c_uint = 115;
pub const MissingDelegateEvent: ::libc::c_uint = 120;
pub const CorruptImageEvent: ::libc::c_uint = 125;
pub const FileOpenEvent: ::libc::c_uint = 130;
pub const BlobEvent: ::libc::c_uint = 135;
pub const StreamEvent: ::libc::c_uint = 140;
pub const CacheEvent: ::libc::c_uint = 145;
pub const CoderEvent: ::libc::c_uint = 150;
pub const ModuleEvent: ::libc::c_uint = 155;
pub const DrawEvent: ::libc::c_uint = 160;
pub const RenderEvent: ::libc::c_uint = 160;
pub const ImageEvent: ::libc::c_uint = 165;
pub const WandEvent: ::libc::c_uint = 167;
pub const TemporaryFileEvent: ::libc::c_uint = 170;
pub const TransformEvent: ::libc::c_uint = 175;
pub const XServerEvent: ::libc::c_uint = 180;
pub const X11Event: ::libc::c_uint = 181;
pub const UserEvent: ::libc::c_uint = 182;
pub const MonitorEvent: ::libc::c_uint = 185;
pub const LocaleEvent: ::libc::c_uint = 186;
pub const DeprecateEvent: ::libc::c_uint = 187;
pub const RegistryEvent: ::libc::c_uint = 190;
pub const ConfigureEvent: ::libc::c_uint = 195;
pub const WarningException: ::libc::c_uint = 300;
pub const ExceptionWarning: ::libc::c_uint = 301;
pub const ResourceWarning: ::libc::c_uint = 302;
pub const ResourceLimitWarning: ::libc::c_uint = 302;
pub const TypeWarning: ::libc::c_uint = 305;
pub const AnnotateWarning: ::libc::c_uint = 305;
pub const OptionWarning: ::libc::c_uint = 310;
pub const DelegateWarning: ::libc::c_uint = 315;
pub const MissingDelegateWarning: ::libc::c_uint = 320;
pub const CorruptImageWarning: ::libc::c_uint = 325;
pub const FileOpenWarning: ::libc::c_uint = 330;
pub const BlobWarning: ::libc::c_uint = 335;
pub const StreamWarning: ::libc::c_uint = 340;
pub const CacheWarning: ::libc::c_uint = 345;
pub const CoderWarning: ::libc::c_uint = 350;
pub const ModuleWarning: ::libc::c_uint = 355;
pub const DrawWarning: ::libc::c_uint = 360;
pub const RenderWarning: ::libc::c_uint = 360;
pub const ImageWarning: ::libc::c_uint = 365;
pub const WandWarning: ::libc::c_uint = 367;
pub const TemporaryFileWarning: ::libc::c_uint = 370;
pub const TransformWarning: ::libc::c_uint = 375;
pub const XServerWarning: ::libc::c_uint = 380;
pub const X11Warning: ::libc::c_uint = 381;
pub const UserWarning: ::libc::c_uint = 382;
pub const MonitorWarning: ::libc::c_uint = 385;
pub const LocaleWarning: ::libc::c_uint = 386;
pub const DeprecateWarning: ::libc::c_uint = 387;
pub const RegistryWarning: ::libc::c_uint = 390;
pub const ConfigureWarning: ::libc::c_uint = 395;
pub const ErrorException: ::libc::c_uint = 400;
pub const ExceptionError: ::libc::c_uint = 401;
pub const ResourceError: ::libc::c_uint = 402;
pub const ResourceLimitError: ::libc::c_uint = 402;
pub const TypeError: ::libc::c_uint = 405;
pub const AnnotateError: ::libc::c_uint = 405;
pub const OptionError: ::libc::c_uint = 410;
pub const DelegateError: ::libc::c_uint = 415;
pub const MissingDelegateError: ::libc::c_uint = 420;
pub const CorruptImageError: ::libc::c_uint = 425;
pub const FileOpenError: ::libc::c_uint = 430;
pub const BlobError: ::libc::c_uint = 435;
pub const StreamError: ::libc::c_uint = 440;
pub const CacheError: ::libc::c_uint = 445;
pub const CoderError: ::libc::c_uint = 450;
pub const ModuleError: ::libc::c_uint = 455;
pub const DrawError: ::libc::c_uint = 460;
pub const RenderError: ::libc::c_uint = 460;
pub const ImageError: ::libc::c_uint = 465;
pub const WandError: ::libc::c_uint = 467;
pub const TemporaryFileError: ::libc::c_uint = 470;
pub const TransformError: ::libc::c_uint = 475;
pub const XServerError: ::libc::c_uint = 480;
pub const X11Error: ::libc::c_uint = 481;
pub const UserError: ::libc::c_uint = 482;
pub const MonitorError: ::libc::c_uint = 485;
pub const LocaleError: ::libc::c_uint = 486;
pub const DeprecateError: ::libc::c_uint = 487;
pub const RegistryError: ::libc::c_uint = 490;
pub const ConfigureError: ::libc::c_uint = 495;
pub const FatalErrorException: ::libc::c_uint = 700;
pub const ExceptionFatalError: ::libc::c_uint = 701;
pub const ResourceFatalError: ::libc::c_uint = 702;
pub const ResourceLimitFatalError: ::libc::c_uint = 702;
pub const TypeFatalError: ::libc::c_uint = 705;
pub const AnnotateFatalError: ::libc::c_uint = 705;
pub const OptionFatalError: ::libc::c_uint = 710;
pub const DelegateFatalError: ::libc::c_uint = 715;
pub const MissingDelegateFatalError: ::libc::c_uint = 720;
pub const CorruptImageFatalError: ::libc::c_uint = 725;
pub const FileOpenFatalError: ::libc::c_uint = 730;
pub const BlobFatalError: ::libc::c_uint = 735;
pub const StreamFatalError: ::libc::c_uint = 740;
pub const CacheFatalError: ::libc::c_uint = 745;
pub const CoderFatalError: ::libc::c_uint = 750;
pub const ModuleFatalError: ::libc::c_uint = 755;
pub const DrawFatalError: ::libc::c_uint = 760;
pub const RenderFatalError: ::libc::c_uint = 760;
pub const ImageFatalError: ::libc::c_uint = 765;
pub const WandFatalError: ::libc::c_uint = 767;
pub const TemporaryFileFatalError: ::libc::c_uint = 770;
pub const TransformFatalError: ::libc::c_uint = 775;
pub const XServerFatalError: ::libc::c_uint = 780;
pub const X11FatalError: ::libc::c_uint = 781;
pub const UserFatalError: ::libc::c_uint = 782;
pub const MonitorFatalError: ::libc::c_uint = 785;
pub const LocaleFatalError: ::libc::c_uint = 786;
pub const DeprecateFatalError: ::libc::c_uint = 787;
pub const RegistryFatalError: ::libc::c_uint = 790;
pub const ConfigureFatalError: ::libc::c_uint = 795;
pub type ExceptionType = Enum_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ExceptionInfo {
    pub severity: ExceptionType,
    pub reason: *mut ::libc::c_char,
    pub description: *mut ::libc::c_char,
    pub error_number: ::libc::c_int,
    pub module: *mut ::libc::c_char,
    pub function: *mut ::libc::c_char,
    pub line: ::libc::c_ulong,
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__ExceptionInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ExceptionInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ExceptionInfo = Struct__ExceptionInfo;
pub type ErrorHandler =
    ::std::option::Option<extern "C" fn(arg1: ExceptionType,
                                        arg2: *const ::libc::c_char,
                                        arg3: *const ::libc::c_char) -> ()>;
pub type FatalErrorHandler =
    ::std::option::Option<extern "C" fn(arg1: ExceptionType,
                                        arg2: *const ::libc::c_char,
                                        arg3: *const ::libc::c_char) -> ()>;
pub type WarningHandler =
    ::std::option::Option<extern "C" fn(arg1: ExceptionType,
                                        arg2: *const ::libc::c_char,
                                        arg3: *const ::libc::c_char) -> ()>;
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const UndefinedEventMask: ::libc::c_uint = 0;
pub const NoEventsMask: ::libc::c_uint = 0;
pub const ConfigureEventMask: ::libc::c_uint = 1;
pub const AnnotateEventMask: ::libc::c_uint = 2;
pub const RenderEventMask: ::libc::c_uint = 4;
pub const TransformEventMask: ::libc::c_uint = 8;
pub const LocaleEventMask: ::libc::c_uint = 16;
pub const CoderEventMask: ::libc::c_uint = 32;
pub const X11EventMask: ::libc::c_uint = 64;
pub const CacheEventMask: ::libc::c_uint = 128;
pub const BlobEventMask: ::libc::c_uint = 256;
pub const DeprecateEventMask: ::libc::c_uint = 512;
pub const UserEventMask: ::libc::c_uint = 1024;
pub const ResourceEventMask: ::libc::c_uint = 2048;
pub const TemporaryFileEventMask: ::libc::c_uint = 4096;
pub const ExceptionEventMask: ::libc::c_uint = 458752;
pub const OptionEventMask: ::libc::c_uint = 16384;
pub const InformationEventMask: ::libc::c_uint = 32768;
pub const WarningEventMask: ::libc::c_uint = 65536;
pub const ErrorEventMask: ::libc::c_uint = 131072;
pub const FatalErrorEventMask: ::libc::c_uint = 262144;
pub const AllEventsMask: ::libc::c_uint = 2147483647;
pub type LogEventType = Enum_Unnamed11;
pub type LogMethod =
    ::std::option::Option<extern "C" fn(arg1: ExceptionType,
                                        arg2: *const ::libc::c_char) -> ()>;
pub type Enum_Unnamed12 = ::libc::c_uint;
pub const UndefinedTimerState: ::libc::c_uint = 0;
pub const StoppedTimerState: ::libc::c_uint = 1;
pub const RunningTimerState: ::libc::c_uint = 2;
pub type TimerState = Enum_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__Timer {
    pub start: ::libc::c_double,
    pub stop: ::libc::c_double,
    pub total: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__Timer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__Timer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Timer = Struct__Timer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__TimerInfo {
    pub user: Timer,
    pub elapsed: Timer,
    pub state: TimerState,
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__TimerInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__TimerInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TimerInfo = Struct__TimerInfo;
pub type Quantum = ::libc::c_uchar;
pub type Enum_Unnamed13 = ::libc::c_uint;
pub const UnspecifiedAlpha: ::libc::c_uint = 0;
pub const AssociatedAlpha: ::libc::c_uint = 1;
pub const UnassociatedAlpha: ::libc::c_uint = 2;
pub type AlphaType = Enum_Unnamed13;
pub type Enum_Unnamed14 = ::libc::c_uint;
pub const UndefinedChannel: ::libc::c_uint = 0;
pub const RedChannel: ::libc::c_uint = 1;
pub const CyanChannel: ::libc::c_uint = 2;
pub const GreenChannel: ::libc::c_uint = 3;
pub const MagentaChannel: ::libc::c_uint = 4;
pub const BlueChannel: ::libc::c_uint = 5;
pub const YellowChannel: ::libc::c_uint = 6;
pub const OpacityChannel: ::libc::c_uint = 7;
pub const BlackChannel: ::libc::c_uint = 8;
pub const MatteChannel: ::libc::c_uint = 9;
pub const AllChannels: ::libc::c_uint = 10;
pub const GrayChannel: ::libc::c_uint = 11;
pub type ChannelType = Enum_Unnamed14;
pub type Enum_Unnamed15 = ::libc::c_uint;
pub const UndefinedClass: ::libc::c_uint = 0;
pub const DirectClass: ::libc::c_uint = 1;
pub const PseudoClass: ::libc::c_uint = 2;
pub type ClassType = Enum_Unnamed15;
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const UndefinedCompositeOp: ::libc::c_uint = 0;
pub const OverCompositeOp: ::libc::c_uint = 1;
pub const InCompositeOp: ::libc::c_uint = 2;
pub const OutCompositeOp: ::libc::c_uint = 3;
pub const AtopCompositeOp: ::libc::c_uint = 4;
pub const XorCompositeOp: ::libc::c_uint = 5;
pub const PlusCompositeOp: ::libc::c_uint = 6;
pub const MinusCompositeOp: ::libc::c_uint = 7;
pub const AddCompositeOp: ::libc::c_uint = 8;
pub const SubtractCompositeOp: ::libc::c_uint = 9;
pub const DifferenceCompositeOp: ::libc::c_uint = 10;
pub const MultiplyCompositeOp: ::libc::c_uint = 11;
pub const BumpmapCompositeOp: ::libc::c_uint = 12;
pub const CopyCompositeOp: ::libc::c_uint = 13;
pub const CopyRedCompositeOp: ::libc::c_uint = 14;
pub const CopyGreenCompositeOp: ::libc::c_uint = 15;
pub const CopyBlueCompositeOp: ::libc::c_uint = 16;
pub const CopyOpacityCompositeOp: ::libc::c_uint = 17;
pub const ClearCompositeOp: ::libc::c_uint = 18;
pub const DissolveCompositeOp: ::libc::c_uint = 19;
pub const DisplaceCompositeOp: ::libc::c_uint = 20;
pub const ModulateCompositeOp: ::libc::c_uint = 21;
pub const ThresholdCompositeOp: ::libc::c_uint = 22;
pub const NoCompositeOp: ::libc::c_uint = 23;
pub const DarkenCompositeOp: ::libc::c_uint = 24;
pub const LightenCompositeOp: ::libc::c_uint = 25;
pub const HueCompositeOp: ::libc::c_uint = 26;
pub const SaturateCompositeOp: ::libc::c_uint = 27;
pub const ColorizeCompositeOp: ::libc::c_uint = 28;
pub const LuminizeCompositeOp: ::libc::c_uint = 29;
pub const ScreenCompositeOp: ::libc::c_uint = 30;
pub const OverlayCompositeOp: ::libc::c_uint = 31;
pub const CopyCyanCompositeOp: ::libc::c_uint = 32;
pub const CopyMagentaCompositeOp: ::libc::c_uint = 33;
pub const CopyYellowCompositeOp: ::libc::c_uint = 34;
pub const CopyBlackCompositeOp: ::libc::c_uint = 35;
pub const DivideCompositeOp: ::libc::c_uint = 36;
pub const HardLightCompositeOp: ::libc::c_uint = 37;
pub const ExclusionCompositeOp: ::libc::c_uint = 38;
pub const ColorDodgeCompositeOp: ::libc::c_uint = 39;
pub const ColorBurnCompositeOp: ::libc::c_uint = 40;
pub const SoftLightCompositeOp: ::libc::c_uint = 41;
pub const LinearBurnCompositeOp: ::libc::c_uint = 42;
pub const LinearDodgeCompositeOp: ::libc::c_uint = 43;
pub const LinearLightCompositeOp: ::libc::c_uint = 44;
pub const VividLightCompositeOp: ::libc::c_uint = 45;
pub const PinLightCompositeOp: ::libc::c_uint = 46;
pub const HardMixCompositeOp: ::libc::c_uint = 47;
pub type CompositeOperator = Enum_Unnamed16;
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const UndefinedCompression: ::libc::c_uint = 0;
pub const NoCompression: ::libc::c_uint = 1;
pub const BZipCompression: ::libc::c_uint = 2;
pub const FaxCompression: ::libc::c_uint = 3;
pub const Group3Compression: ::libc::c_uint = 3;
pub const Group4Compression: ::libc::c_uint = 4;
pub const JPEGCompression: ::libc::c_uint = 5;
pub const LosslessJPEGCompression: ::libc::c_uint = 6;
pub const LZWCompression: ::libc::c_uint = 7;
pub const RLECompression: ::libc::c_uint = 8;
pub const ZipCompression: ::libc::c_uint = 9;
pub const LZMACompression: ::libc::c_uint = 10;
pub const JPEG2000Compression: ::libc::c_uint = 11;
pub const JBIG1Compression: ::libc::c_uint = 12;
pub const JBIG2Compression: ::libc::c_uint = 13;
pub type CompressionType = Enum_Unnamed17;
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const UndefinedDispose: ::libc::c_uint = 0;
pub const NoneDispose: ::libc::c_uint = 1;
pub const BackgroundDispose: ::libc::c_uint = 2;
pub const PreviousDispose: ::libc::c_uint = 3;
pub type DisposeType = Enum_Unnamed18;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const UndefinedEndian: ::libc::c_uint = 0;
pub const LSBEndian: ::libc::c_uint = 1;
pub const MSBEndian: ::libc::c_uint = 2;
pub const NativeEndian: ::libc::c_uint = 3;
pub type EndianType = Enum_Unnamed19;
pub type Enum_Unnamed20 = ::libc::c_uint;
pub const UndefinedFilter: ::libc::c_uint = 0;
pub const PointFilter: ::libc::c_uint = 1;
pub const BoxFilter: ::libc::c_uint = 2;
pub const TriangleFilter: ::libc::c_uint = 3;
pub const HermiteFilter: ::libc::c_uint = 4;
pub const HanningFilter: ::libc::c_uint = 5;
pub const HammingFilter: ::libc::c_uint = 6;
pub const BlackmanFilter: ::libc::c_uint = 7;
pub const GaussianFilter: ::libc::c_uint = 8;
pub const QuadraticFilter: ::libc::c_uint = 9;
pub const CubicFilter: ::libc::c_uint = 10;
pub const CatromFilter: ::libc::c_uint = 11;
pub const MitchellFilter: ::libc::c_uint = 12;
pub const LanczosFilter: ::libc::c_uint = 13;
pub const BesselFilter: ::libc::c_uint = 14;
pub const SincFilter: ::libc::c_uint = 15;
pub type FilterTypes = Enum_Unnamed20;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const NoValue: ::libc::c_uint = 0;
pub const XValue: ::libc::c_uint = 1;
pub const YValue: ::libc::c_uint = 2;
pub const WidthValue: ::libc::c_uint = 4;
pub const HeightValue: ::libc::c_uint = 8;
pub const AllValues: ::libc::c_uint = 15;
pub const XNegative: ::libc::c_uint = 16;
pub const YNegative: ::libc::c_uint = 32;
pub const PercentValue: ::libc::c_uint = 4096;
pub const AspectValue: ::libc::c_uint = 8192;
pub const LessValue: ::libc::c_uint = 16384;
pub const GreaterValue: ::libc::c_uint = 32768;
pub const AreaValue: ::libc::c_uint = 65536;
pub const MinimumValue: ::libc::c_uint = 131072;
pub type GeometryFlags = Enum_Unnamed21;
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const ForgetGravity: ::libc::c_uint = 0;
pub const NorthWestGravity: ::libc::c_uint = 1;
pub const NorthGravity: ::libc::c_uint = 2;
pub const NorthEastGravity: ::libc::c_uint = 3;
pub const WestGravity: ::libc::c_uint = 4;
pub const CenterGravity: ::libc::c_uint = 5;
pub const EastGravity: ::libc::c_uint = 6;
pub const SouthWestGravity: ::libc::c_uint = 7;
pub const SouthGravity: ::libc::c_uint = 8;
pub const SouthEastGravity: ::libc::c_uint = 9;
pub const StaticGravity: ::libc::c_uint = 10;
pub type GravityType = Enum_Unnamed22;
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const UndefinedType: ::libc::c_uint = 0;
pub const BilevelType: ::libc::c_uint = 1;
pub const GrayscaleType: ::libc::c_uint = 2;
pub const GrayscaleMatteType: ::libc::c_uint = 3;
pub const PaletteType: ::libc::c_uint = 4;
pub const PaletteMatteType: ::libc::c_uint = 5;
pub const TrueColorType: ::libc::c_uint = 6;
pub const TrueColorMatteType: ::libc::c_uint = 7;
pub const ColorSeparationType: ::libc::c_uint = 8;
pub const ColorSeparationMatteType: ::libc::c_uint = 9;
pub const OptimizeType: ::libc::c_uint = 10;
pub type ImageType = Enum_Unnamed23;
pub type Enum_Unnamed24 = ::libc::c_uint;
pub const UndefinedInterlace: ::libc::c_uint = 0;
pub const NoInterlace: ::libc::c_uint = 1;
pub const LineInterlace: ::libc::c_uint = 2;
pub const PlaneInterlace: ::libc::c_uint = 3;
pub const PartitionInterlace: ::libc::c_uint = 4;
pub type InterlaceType = Enum_Unnamed24;
pub type Enum_Unnamed25 = ::libc::c_uint;
pub const UndefinedMode: ::libc::c_uint = 0;
pub const FrameMode: ::libc::c_uint = 1;
pub const UnframeMode: ::libc::c_uint = 2;
pub const ConcatenateMode: ::libc::c_uint = 3;
pub type MontageMode = Enum_Unnamed25;
pub type Enum_Unnamed26 = ::libc::c_uint;
pub const UniformNoise: ::libc::c_uint = 0;
pub const GaussianNoise: ::libc::c_uint = 1;
pub const MultiplicativeGaussianNoise: ::libc::c_uint = 2;
pub const ImpulseNoise: ::libc::c_uint = 3;
pub const LaplacianNoise: ::libc::c_uint = 4;
pub const PoissonNoise: ::libc::c_uint = 5;
pub const RandomNoise: ::libc::c_uint = 6;
pub const UndefinedNoise: ::libc::c_uint = 7;
pub type NoiseType = Enum_Unnamed26;
pub type Enum_Unnamed27 = ::libc::c_uint;
pub const UndefinedOrientation: ::libc::c_uint = 0;
pub const TopLeftOrientation: ::libc::c_uint = 1;
pub const TopRightOrientation: ::libc::c_uint = 2;
pub const BottomRightOrientation: ::libc::c_uint = 3;
pub const BottomLeftOrientation: ::libc::c_uint = 4;
pub const LeftTopOrientation: ::libc::c_uint = 5;
pub const RightTopOrientation: ::libc::c_uint = 6;
pub const RightBottomOrientation: ::libc::c_uint = 7;
pub const LeftBottomOrientation: ::libc::c_uint = 8;
pub type OrientationType = Enum_Unnamed27;
pub type Enum_Unnamed28 = ::libc::c_uint;
pub const UndefinedPreview: ::libc::c_uint = 0;
pub const RotatePreview: ::libc::c_uint = 1;
pub const ShearPreview: ::libc::c_uint = 2;
pub const RollPreview: ::libc::c_uint = 3;
pub const HuePreview: ::libc::c_uint = 4;
pub const SaturationPreview: ::libc::c_uint = 5;
pub const BrightnessPreview: ::libc::c_uint = 6;
pub const GammaPreview: ::libc::c_uint = 7;
pub const SpiffPreview: ::libc::c_uint = 8;
pub const DullPreview: ::libc::c_uint = 9;
pub const GrayscalePreview: ::libc::c_uint = 10;
pub const QuantizePreview: ::libc::c_uint = 11;
pub const DespecklePreview: ::libc::c_uint = 12;
pub const ReduceNoisePreview: ::libc::c_uint = 13;
pub const AddNoisePreview: ::libc::c_uint = 14;
pub const SharpenPreview: ::libc::c_uint = 15;
pub const BlurPreview: ::libc::c_uint = 16;
pub const ThresholdPreview: ::libc::c_uint = 17;
pub const EdgeDetectPreview: ::libc::c_uint = 18;
pub const SpreadPreview: ::libc::c_uint = 19;
pub const SolarizePreview: ::libc::c_uint = 20;
pub const ShadePreview: ::libc::c_uint = 21;
pub const RaisePreview: ::libc::c_uint = 22;
pub const SegmentPreview: ::libc::c_uint = 23;
pub const SwirlPreview: ::libc::c_uint = 24;
pub const ImplodePreview: ::libc::c_uint = 25;
pub const WavePreview: ::libc::c_uint = 26;
pub const OilPaintPreview: ::libc::c_uint = 27;
pub const CharcoalDrawingPreview: ::libc::c_uint = 28;
pub const JPEGPreview: ::libc::c_uint = 29;
pub type PreviewType = Enum_Unnamed28;
pub type Enum_Unnamed29 = ::libc::c_uint;
pub const UndefinedIntent: ::libc::c_uint = 0;
pub const SaturationIntent: ::libc::c_uint = 1;
pub const PerceptualIntent: ::libc::c_uint = 2;
pub const AbsoluteIntent: ::libc::c_uint = 3;
pub const RelativeIntent: ::libc::c_uint = 4;
pub type RenderingIntent = Enum_Unnamed29;
pub type Enum_Unnamed30 = ::libc::c_uint;
pub const UndefinedResolution: ::libc::c_uint = 0;
pub const PixelsPerInchResolution: ::libc::c_uint = 1;
pub const PixelsPerCentimeterResolution: ::libc::c_uint = 2;
pub type ResolutionType = Enum_Unnamed30;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__AffineMatrix {
    pub sx: ::libc::c_double,
    pub rx: ::libc::c_double,
    pub ry: ::libc::c_double,
    pub sy: ::libc::c_double,
    pub tx: ::libc::c_double,
    pub ty: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__AffineMatrix {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__AffineMatrix {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type AffineMatrix = Struct__AffineMatrix;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PrimaryInfo {
    pub x: ::libc::c_double,
    pub y: ::libc::c_double,
    pub z: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__PrimaryInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PrimaryInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PrimaryInfo = Struct__PrimaryInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ChromaticityInfo {
    pub red_primary: PrimaryInfo,
    pub green_primary: PrimaryInfo,
    pub blue_primary: PrimaryInfo,
    pub white_point: PrimaryInfo,
}
impl ::std::clone::Clone for Struct__ChromaticityInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ChromaticityInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ChromaticityInfo = Struct__ChromaticityInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PixelPacket {
    pub blue: Quantum,
    pub green: Quantum,
    pub red: Quantum,
    pub opacity: Quantum,
}
impl ::std::clone::Clone for Struct__PixelPacket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PixelPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PixelPacket = Struct__PixelPacket;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DoublePixelPacket {
    pub red: ::libc::c_double,
    pub green: ::libc::c_double,
    pub blue: ::libc::c_double,
    pub opacity: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__DoublePixelPacket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__DoublePixelPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DoublePixelPacket = Struct__DoublePixelPacket;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FloatPixelPacket {
    pub red: ::libc::c_float,
    pub green: ::libc::c_float,
    pub blue: ::libc::c_float,
    pub opacity: ::libc::c_float,
}
impl ::std::clone::Clone for Struct__FloatPixelPacket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__FloatPixelPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FloatPixelPacket = Struct__FloatPixelPacket;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ErrorInfo {
    pub mean_error_per_pixel: ::libc::c_double,
    pub normalized_mean_error: ::libc::c_double,
    pub normalized_maximum_error: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__ErrorInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ErrorInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ErrorInfo = Struct__ErrorInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FrameInfo {
    pub width: ::libc::c_ulong,
    pub height: ::libc::c_ulong,
    pub x: ::libc::c_long,
    pub y: ::libc::c_long,
    pub inner_bevel: ::libc::c_long,
    pub outer_bevel: ::libc::c_long,
}
impl ::std::clone::Clone for Struct__FrameInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__FrameInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FrameInfo = Struct__FrameInfo;
pub type IndexPacket = Quantum;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__LongPixelPacket {
    pub red: ::libc::c_ulong,
    pub green: ::libc::c_ulong,
    pub blue: ::libc::c_ulong,
    pub opacity: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__LongPixelPacket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__LongPixelPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LongPixelPacket = Struct__LongPixelPacket;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__MontageInfo {
    pub geometry: *mut ::libc::c_char,
    pub tile: *mut ::libc::c_char,
    pub title: *mut ::libc::c_char,
    pub frame: *mut ::libc::c_char,
    pub texture: *mut ::libc::c_char,
    pub font: *mut ::libc::c_char,
    pub pointsize: ::libc::c_double,
    pub border_width: ::libc::c_ulong,
    pub shadow: ::libc::c_uint,
    pub fill: PixelPacket,
    pub stroke: PixelPacket,
    pub background_color: PixelPacket,
    pub border_color: PixelPacket,
    pub matte_color: PixelPacket,
    pub gravity: GravityType,
    pub filename: [::libc::c_char; 2053usize],
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__MontageInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__MontageInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MontageInfo = Struct__MontageInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ProfileInfo {
    pub length: size_t,
    pub name: *mut ::libc::c_char,
    pub info: *mut ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct__ProfileInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ProfileInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ProfileInfo = Struct__ProfileInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__RectangleInfo {
    pub width: ::libc::c_ulong,
    pub height: ::libc::c_ulong,
    pub x: ::libc::c_long,
    pub y: ::libc::c_long,
}
impl ::std::clone::Clone for Struct__RectangleInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__RectangleInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RectangleInfo = Struct__RectangleInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__SegmentInfo {
    pub x1: ::libc::c_double,
    pub y1: ::libc::c_double,
    pub x2: ::libc::c_double,
    pub y2: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__SegmentInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__SegmentInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SegmentInfo = Struct__SegmentInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__Image {
    pub storage_class: ClassType,
    pub colorspace: ColorspaceType,
    pub compression: CompressionType,
    pub dither: ::libc::c_uint,
    pub matte: ::libc::c_uint,
    pub columns: ::libc::c_ulong,
    pub rows: ::libc::c_ulong,
    pub colors: ::libc::c_uint,
    pub depth: ::libc::c_uint,
    pub colormap: *mut PixelPacket,
    pub background_color: PixelPacket,
    pub border_color: PixelPacket,
    pub matte_color: PixelPacket,
    pub gamma: ::libc::c_double,
    pub chromaticity: ChromaticityInfo,
    pub orientation: OrientationType,
    pub rendering_intent: RenderingIntent,
    pub units: ResolutionType,
    pub montage: *mut ::libc::c_char,
    pub directory: *mut ::libc::c_char,
    pub geometry: *mut ::libc::c_char,
    pub offset: ::libc::c_long,
    pub x_resolution: ::libc::c_double,
    pub y_resolution: ::libc::c_double,
    pub page: RectangleInfo,
    pub tile_info: RectangleInfo,
    pub blur: ::libc::c_double,
    pub fuzz: ::libc::c_double,
    pub filter: FilterTypes,
    pub interlace: InterlaceType,
    pub endian: EndianType,
    pub gravity: GravityType,
    pub compose: CompositeOperator,
    pub dispose: DisposeType,
    pub scene: ::libc::c_ulong,
    pub delay: ::libc::c_ulong,
    pub iterations: ::libc::c_ulong,
    pub total_colors: ::libc::c_ulong,
    pub start_loop: ::libc::c_long,
    pub error: ErrorInfo,
    pub timer: TimerInfo,
    pub client_data: *mut ::libc::c_void,
    pub filename: [::libc::c_char; 2053usize],
    pub magick_filename: [::libc::c_char; 2053usize],
    pub magick: [::libc::c_char; 2053usize],
    pub magick_columns: ::libc::c_ulong,
    pub magick_rows: ::libc::c_ulong,
    pub exception: ExceptionInfo,
    pub previous: *mut Struct__Image,
    pub next: *mut Struct__Image,
    pub profiles: *mut ::libc::c_void,
    pub is_monochrome: ::libc::c_uint,
    pub is_grayscale: ::libc::c_uint,
    pub taint: ::libc::c_uint,
    pub clip_mask: *mut Struct__Image,
    pub ping: ::libc::c_uint,
    pub cache: _CacheInfoPtr_,
    pub default_views: _ThreadViewSetPtr_,
    pub attributes: _ImageAttributePtr_,
    pub ascii85: _Ascii85InfoPtr_,
    pub blob: _BlobInfoPtr_,
    pub reference_count: ::libc::c_long,
    pub semaphore: _SemaphoreInfoPtr_,
    pub logging: ::libc::c_uint,
    pub list: *mut Struct__Image,
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__Image {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__Image {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Image = Struct__Image;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ImageInfo {
    pub compression: CompressionType,
    pub temporary: ::libc::c_uint,
    pub adjoin: ::libc::c_uint,
    pub antialias: ::libc::c_uint,
    pub subimage: ::libc::c_ulong,
    pub subrange: ::libc::c_ulong,
    pub depth: ::libc::c_ulong,
    pub size: *mut ::libc::c_char,
    pub tile: *mut ::libc::c_char,
    pub page: *mut ::libc::c_char,
    pub interlace: InterlaceType,
    pub endian: EndianType,
    pub units: ResolutionType,
    pub quality: ::libc::c_ulong,
    pub sampling_factor: *mut ::libc::c_char,
    pub server_name: *mut ::libc::c_char,
    pub font: *mut ::libc::c_char,
    pub texture: *mut ::libc::c_char,
    pub density: *mut ::libc::c_char,
    pub pointsize: ::libc::c_double,
    pub fuzz: ::libc::c_double,
    pub pen: PixelPacket,
    pub background_color: PixelPacket,
    pub border_color: PixelPacket,
    pub matte_color: PixelPacket,
    pub dither: ::libc::c_uint,
    pub monochrome: ::libc::c_uint,
    pub progress: ::libc::c_uint,
    pub colorspace: ColorspaceType,
    pub _type: ImageType,
    pub group: ::libc::c_long,
    pub verbose: ::libc::c_uint,
    pub view: *mut ::libc::c_char,
    pub authenticate: *mut ::libc::c_char,
    pub client_data: *mut ::libc::c_void,
    pub file: *mut FILE,
    pub magick: [::libc::c_char; 2053usize],
    pub filename: [::libc::c_char; 2053usize],
    pub cache: _CacheInfoPtr_,
    pub definitions: *mut ::libc::c_void,
    pub attributes: *mut Image,
    pub ping: ::libc::c_uint,
    pub preview_type: PreviewType,
    pub affirm: ::libc::c_uint,
    pub blob: _BlobInfoPtr_,
    pub length: size_t,
    pub unique: [::libc::c_char; 2053usize],
    pub zero: [::libc::c_char; 2053usize],
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__ImageInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ImageInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ImageInfo = Struct__ImageInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ImageCharacteristics {
    pub cmyk: ::libc::c_uint,
    pub grayscale: ::libc::c_uint,
    pub monochrome: ::libc::c_uint,
    pub opaque: ::libc::c_uint,
    pub palette: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct__ImageCharacteristics {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ImageCharacteristics {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ImageCharacteristics = Struct__ImageCharacteristics;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ImageAttribute {
    pub key: *mut ::libc::c_char,
    pub value: *mut ::libc::c_char,
    pub length: size_t,
    pub previous: *mut Struct__ImageAttribute,
    pub next: *mut Struct__ImageAttribute,
}
impl ::std::clone::Clone for Struct__ImageAttribute {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ImageAttribute {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ImageAttribute = Struct__ImageAttribute;
pub type BlobInfo = Struct__BlobInfo;
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const UndefinedBlobMode: ::libc::c_uint = 0;
pub const ReadBlobMode: ::libc::c_uint = 1;
pub const ReadBinaryBlobMode: ::libc::c_uint = 2;
pub const WriteBlobMode: ::libc::c_uint = 3;
pub const WriteBinaryBlobMode: ::libc::c_uint = 4;
pub type BlobMode = Enum_Unnamed31;
pub type Enum_Unnamed32 = ::libc::c_uint;
pub const ReadMode: ::libc::c_uint = 0;
pub const WriteMode: ::libc::c_uint = 1;
pub const IOMode: ::libc::c_uint = 2;
pub type MapMode = Enum_Unnamed32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HistogramColorPacket {
    pub pixel: PixelPacket,
    pub count: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__HistogramColorPacket {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HistogramColorPacket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HistogramColorPacket = Struct__HistogramColorPacket;
pub type Enum_Unnamed33 = ::libc::c_uint;
pub const UndefinedCompliance: ::libc::c_uint = 0;
pub const NoCompliance: ::libc::c_uint = 0;
pub const SVGCompliance: ::libc::c_uint = 1;
pub const X11Compliance: ::libc::c_uint = 2;
pub const XPMCompliance: ::libc::c_uint = 4;
pub const AllCompliance: ::libc::c_uint = 65535;
pub type ComplianceType = Enum_Unnamed33;
pub type Enum_Unnamed34 = ::libc::c_uint;
pub const UndefinedHighlightStyle: ::libc::c_uint = 0;
pub const AssignHighlightStyle: ::libc::c_uint = 1;
pub const ThresholdHighlightStyle: ::libc::c_uint = 2;
pub const TintHighlightStyle: ::libc::c_uint = 3;
pub const XorHighlightStyle: ::libc::c_uint = 4;
pub type HighlightStyle = Enum_Unnamed34;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DifferenceImageOptions {
    pub channel: ChannelType,
    pub highlight_style: HighlightStyle,
    pub highlight_color: PixelPacket,
}
impl ::std::clone::Clone for Struct__DifferenceImageOptions {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__DifferenceImageOptions {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DifferenceImageOptions = Struct__DifferenceImageOptions;
pub type Enum_Unnamed35 = ::libc::c_uint;
pub const UndefinedMetric: ::libc::c_uint = 0;
pub const MeanAbsoluteErrorMetric: ::libc::c_uint = 1;
pub const MeanSquaredErrorMetric: ::libc::c_uint = 2;
pub const PeakAbsoluteErrorMetric: ::libc::c_uint = 3;
pub const PeakSignalToNoiseRatioMetric: ::libc::c_uint = 4;
pub const RootMeanSquaredErrorMetric: ::libc::c_uint = 5;
pub type MetricType = Enum_Unnamed35;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DifferenceStatistics {
    pub red: ::libc::c_double,
    pub green: ::libc::c_double,
    pub blue: ::libc::c_double,
    pub opacity: ::libc::c_double,
    pub combined: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__DifferenceStatistics {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__DifferenceStatistics {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DifferenceStatistics = Struct__DifferenceStatistics;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__CompositeOptions_t {
    pub percent_brightness: ::libc::c_double,
    pub amount: ::libc::c_double,
    pub threshold: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__CompositeOptions_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__CompositeOptions_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CompositeOptions_t = Struct__CompositeOptions_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__Ascii85Info {
    pub offset: ::libc::c_long,
    pub line_break: ::libc::c_long,
    pub buffer: [magick_uint8_t; 10usize],
}
impl ::std::clone::Clone for Struct__Ascii85Info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__Ascii85Info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Ascii85Info = Struct__Ascii85Info;
pub type WriteByteHook =
    ::std::option::Option<extern "C" fn(arg1: *mut Image,
                                        arg2: magick_uint8_t,
                                        info: *mut ::libc::c_void)
                              -> ::libc::c_uint>;
pub type Enum_Unnamed36 = ::libc::c_uint;
pub const UndefinedConfirmAccessMode: ::libc::c_uint = 0;
pub const FileExecuteConfirmAccessMode: ::libc::c_uint = 1;
pub const FileReadConfirmAccessMode: ::libc::c_uint = 2;
pub const FileWriteConfirmAccessMode: ::libc::c_uint = 3;
pub const URLGetFTPConfirmAccessMode: ::libc::c_uint = 4;
pub const URLGetFileConfirmAccessMode: ::libc::c_uint = 5;
pub const URLGetHTTPConfirmAccessMode: ::libc::c_uint = 6;
pub type ConfirmAccessMode = Enum_Unnamed36;
pub type ConfirmAccessHandler =
    ::std::option::Option<extern "C" fn(mode: ConfirmAccessMode,
                                        path: *const ::libc::c_char,
                                        exception: *mut ExceptionInfo)
                              -> ::libc::c_uint>;
pub type Enum_Unnamed37 = ::libc::c_uint;
pub const UndefinedQuantum: ::libc::c_uint = 0;
pub const IndexQuantum: ::libc::c_uint = 1;
pub const GrayQuantum: ::libc::c_uint = 2;
pub const IndexAlphaQuantum: ::libc::c_uint = 3;
pub const GrayAlphaQuantum: ::libc::c_uint = 4;
pub const RedQuantum: ::libc::c_uint = 5;
pub const CyanQuantum: ::libc::c_uint = 6;
pub const GreenQuantum: ::libc::c_uint = 7;
pub const YellowQuantum: ::libc::c_uint = 8;
pub const BlueQuantum: ::libc::c_uint = 9;
pub const MagentaQuantum: ::libc::c_uint = 10;
pub const AlphaQuantum: ::libc::c_uint = 11;
pub const BlackQuantum: ::libc::c_uint = 12;
pub const RGBQuantum: ::libc::c_uint = 13;
pub const RGBAQuantum: ::libc::c_uint = 14;
pub const CMYKQuantum: ::libc::c_uint = 15;
pub const CMYKAQuantum: ::libc::c_uint = 16;
pub const CIEYQuantum: ::libc::c_uint = 17;
pub const CIEXYZQuantum: ::libc::c_uint = 18;
pub type QuantumType = Enum_Unnamed37;
pub type Enum_Unnamed38 = ::libc::c_uint;
pub const UndefinedQuantumSampleType: ::libc::c_uint = 0;
pub const UnsignedQuantumSampleType: ::libc::c_uint = 1;
pub const FloatQuantumSampleType: ::libc::c_uint = 2;
pub type QuantumSampleType = Enum_Unnamed38;
pub type Enum_Unnamed39 = ::libc::c_uint;
pub const CharPixel: ::libc::c_uint = 0;
pub const ShortPixel: ::libc::c_uint = 1;
pub const IntegerPixel: ::libc::c_uint = 2;
pub const LongPixel: ::libc::c_uint = 3;
pub const FloatPixel: ::libc::c_uint = 4;
pub const DoublePixel: ::libc::c_uint = 5;
pub type StorageType = Enum_Unnamed39;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ExportPixelAreaOptions {
    pub sample_type: QuantumSampleType,
    pub double_minvalue: ::libc::c_double,
    pub double_maxvalue: ::libc::c_double,
    pub grayscale_miniswhite: ::libc::c_uint,
    pub pad_bytes: ::libc::c_ulong,
    pub pad_value: ::libc::c_uchar,
    pub endian: EndianType,
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__ExportPixelAreaOptions {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ExportPixelAreaOptions {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ExportPixelAreaOptions = Struct__ExportPixelAreaOptions;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ExportPixelAreaInfo {
    pub bytes_exported: size_t,
}
impl ::std::clone::Clone for Struct__ExportPixelAreaInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ExportPixelAreaInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ExportPixelAreaInfo = Struct__ExportPixelAreaInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ImportPixelAreaOptions {
    pub sample_type: QuantumSampleType,
    pub double_minvalue: ::libc::c_double,
    pub double_maxvalue: ::libc::c_double,
    pub grayscale_miniswhite: ::libc::c_uint,
    pub endian: EndianType,
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__ImportPixelAreaOptions {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ImportPixelAreaOptions {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ImportPixelAreaOptions = Struct__ImportPixelAreaOptions;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ImportPixelAreaInfo {
    pub bytes_imported: size_t,
}
impl ::std::clone::Clone for Struct__ImportPixelAreaInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ImportPixelAreaInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ImportPixelAreaInfo = Struct__ImportPixelAreaInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DelegateInfo {
    pub path: *mut ::libc::c_char,
    pub decode: *mut ::libc::c_char,
    pub encode: *mut ::libc::c_char,
    pub commands: *mut ::libc::c_char,
    pub mode: ::libc::c_int,
    pub stealth: ::libc::c_uint,
    pub signature: ::libc::c_ulong,
    pub previous: *mut Struct__DelegateInfo,
    pub next: *mut Struct__DelegateInfo,
}
impl ::std::clone::Clone for Struct__DelegateInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__DelegateInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DelegateInfo = Struct__DelegateInfo;
pub type Enum_Unnamed40 = ::libc::c_uint;
pub const NormalStretch: ::libc::c_uint = 0;
pub const UltraCondensedStretch: ::libc::c_uint = 1;
pub const ExtraCondensedStretch: ::libc::c_uint = 2;
pub const CondensedStretch: ::libc::c_uint = 3;
pub const SemiCondensedStretch: ::libc::c_uint = 4;
pub const SemiExpandedStretch: ::libc::c_uint = 5;
pub const ExpandedStretch: ::libc::c_uint = 6;
pub const ExtraExpandedStretch: ::libc::c_uint = 7;
pub const UltraExpandedStretch: ::libc::c_uint = 8;
pub const AnyStretch: ::libc::c_uint = 9;
pub type StretchType = Enum_Unnamed40;
pub type Enum_Unnamed41 = ::libc::c_uint;
pub const NormalStyle: ::libc::c_uint = 0;
pub const ItalicStyle: ::libc::c_uint = 1;
pub const ObliqueStyle: ::libc::c_uint = 2;
pub const AnyStyle: ::libc::c_uint = 3;
pub type StyleType = Enum_Unnamed41;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__TypeInfo {
    pub path: *mut ::libc::c_char,
    pub name: *mut ::libc::c_char,
    pub description: *mut ::libc::c_char,
    pub family: *mut ::libc::c_char,
    pub style: StyleType,
    pub stretch: StretchType,
    pub weight: ::libc::c_ulong,
    pub encoding: *mut ::libc::c_char,
    pub foundry: *mut ::libc::c_char,
    pub format: *mut ::libc::c_char,
    pub metrics: *mut ::libc::c_char,
    pub glyphs: *mut ::libc::c_char,
    pub stealth: ::libc::c_uint,
    pub signature: ::libc::c_ulong,
    pub previous: *mut Struct__TypeInfo,
    pub next: *mut Struct__TypeInfo,
}
impl ::std::clone::Clone for Struct__TypeInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__TypeInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TypeInfo = Struct__TypeInfo;
pub type Enum_Unnamed42 = ::libc::c_uint;
pub const UndefinedAlign: ::libc::c_uint = 0;
pub const LeftAlign: ::libc::c_uint = 1;
pub const CenterAlign: ::libc::c_uint = 2;
pub const RightAlign: ::libc::c_uint = 3;
pub type AlignType = Enum_Unnamed42;
pub type Enum_Unnamed43 = ::libc::c_uint;
pub const UserSpace: ::libc::c_uint = 0;
pub const UserSpaceOnUse: ::libc::c_uint = 1;
pub const ObjectBoundingBox: ::libc::c_uint = 2;
pub type ClipPathUnits = Enum_Unnamed43;
pub type Enum_Unnamed44 = ::libc::c_uint;
pub const NoDecoration: ::libc::c_uint = 0;
pub const UnderlineDecoration: ::libc::c_uint = 1;
pub const OverlineDecoration: ::libc::c_uint = 2;
pub const LineThroughDecoration: ::libc::c_uint = 3;
pub type DecorationType = Enum_Unnamed44;
pub type Enum_Unnamed45 = ::libc::c_uint;
pub const UndefinedRule: ::libc::c_uint = 0;
pub const EvenOddRule: ::libc::c_uint = 1;
pub const NonZeroRule: ::libc::c_uint = 2;
pub type FillRule = Enum_Unnamed45;
pub type Enum_Unnamed46 = ::libc::c_uint;
pub const UndefinedGradient: ::libc::c_uint = 0;
pub const LinearGradient: ::libc::c_uint = 1;
pub const RadialGradient: ::libc::c_uint = 2;
pub type GradientType = Enum_Unnamed46;
pub type Enum_Unnamed47 = ::libc::c_uint;
pub const UndefinedCap: ::libc::c_uint = 0;
pub const ButtCap: ::libc::c_uint = 1;
pub const RoundCap: ::libc::c_uint = 2;
pub const SquareCap: ::libc::c_uint = 3;
pub type LineCap = Enum_Unnamed47;
pub type Enum_Unnamed48 = ::libc::c_uint;
pub const UndefinedJoin: ::libc::c_uint = 0;
pub const MiterJoin: ::libc::c_uint = 1;
pub const RoundJoin: ::libc::c_uint = 2;
pub const BevelJoin: ::libc::c_uint = 3;
pub type LineJoin = Enum_Unnamed48;
pub type Enum_Unnamed49 = ::libc::c_uint;
pub const PointMethod: ::libc::c_uint = 0;
pub const ReplaceMethod: ::libc::c_uint = 1;
pub const FloodfillMethod: ::libc::c_uint = 2;
pub const FillToBorderMethod: ::libc::c_uint = 3;
pub const ResetMethod: ::libc::c_uint = 4;
pub type PaintMethod = Enum_Unnamed49;
pub type Enum_Unnamed50 = ::libc::c_uint;
pub const UndefinedPrimitive: ::libc::c_uint = 0;
pub const PointPrimitive: ::libc::c_uint = 1;
pub const LinePrimitive: ::libc::c_uint = 2;
pub const RectanglePrimitive: ::libc::c_uint = 3;
pub const RoundRectanglePrimitive: ::libc::c_uint = 4;
pub const ArcPrimitive: ::libc::c_uint = 5;
pub const EllipsePrimitive: ::libc::c_uint = 6;
pub const CirclePrimitive: ::libc::c_uint = 7;
pub const PolylinePrimitive: ::libc::c_uint = 8;
pub const PolygonPrimitive: ::libc::c_uint = 9;
pub const BezierPrimitive: ::libc::c_uint = 10;
pub const ColorPrimitive: ::libc::c_uint = 11;
pub const MattePrimitive: ::libc::c_uint = 12;
pub const TextPrimitive: ::libc::c_uint = 13;
pub const ImagePrimitive: ::libc::c_uint = 14;
pub const PathPrimitive: ::libc::c_uint = 15;
pub type PrimitiveType = Enum_Unnamed50;
pub type Enum_Unnamed51 = ::libc::c_uint;
pub const UndefinedReference: ::libc::c_uint = 0;
pub const GradientReference: ::libc::c_uint = 1;
pub type ReferenceType = Enum_Unnamed51;
pub type Enum_Unnamed52 = ::libc::c_uint;
pub const UndefinedSpread: ::libc::c_uint = 0;
pub const PadSpread: ::libc::c_uint = 1;
pub const ReflectSpead: ::libc::c_uint = 2;
pub const RepeatSpread: ::libc::c_uint = 3;
pub type SpreadMethod = Enum_Unnamed52;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GradientInfo {
    pub _type: GradientType,
    pub color: PixelPacket,
    pub stop: SegmentInfo,
    pub length: ::libc::c_ulong,
    pub spread: SpreadMethod,
    pub signature: ::libc::c_ulong,
    pub previous: *mut Struct__GradientInfo,
    pub next: *mut Struct__GradientInfo,
}
impl ::std::clone::Clone for Struct__GradientInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GradientInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GradientInfo = Struct__GradientInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ElementReference {
    pub id: *mut ::libc::c_char,
    pub _type: ReferenceType,
    pub gradient: GradientInfo,
    pub signature: ::libc::c_ulong,
    pub previous: *mut Struct__ElementReference,
    pub next: *mut Struct__ElementReference,
}
impl ::std::clone::Clone for Struct__ElementReference {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ElementReference {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ElementReference = Struct__ElementReference;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DrawInfo {
    pub primitive: *mut ::libc::c_char,
    pub geometry: *mut ::libc::c_char,
    pub affine: AffineMatrix,
    pub gravity: GravityType,
    pub fill: PixelPacket,
    pub stroke: PixelPacket,
    pub stroke_width: ::libc::c_double,
    pub gradient: GradientInfo,
    pub fill_pattern: *mut Image,
    pub tile: *mut Image,
    pub stroke_pattern: *mut Image,
    pub stroke_antialias: ::libc::c_uint,
    pub text_antialias: ::libc::c_uint,
    pub fill_rule: FillRule,
    pub linecap: LineCap,
    pub linejoin: LineJoin,
    pub miterlimit: ::libc::c_ulong,
    pub dash_offset: ::libc::c_double,
    pub decorate: DecorationType,
    pub compose: CompositeOperator,
    pub text: *mut ::libc::c_char,
    pub font: *mut ::libc::c_char,
    pub family: *mut ::libc::c_char,
    pub style: StyleType,
    pub stretch: StretchType,
    pub weight: ::libc::c_ulong,
    pub encoding: *mut ::libc::c_char,
    pub pointsize: ::libc::c_double,
    pub density: *mut ::libc::c_char,
    pub align: AlignType,
    pub undercolor: PixelPacket,
    pub border_color: PixelPacket,
    pub server_name: *mut ::libc::c_char,
    pub dash_pattern: *mut ::libc::c_double,
    pub clip_path: *mut ::libc::c_char,
    pub bounds: SegmentInfo,
    pub clip_units: ClipPathUnits,
    pub opacity: Quantum,
    pub render: ::libc::c_uint,
    pub debug: ::libc::c_uint,
    pub element_reference: ElementReference,
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__DrawInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__DrawInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DrawInfo = Struct__DrawInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ElementInfo {
    pub cx: ::libc::c_double,
    pub cy: ::libc::c_double,
    pub major: ::libc::c_double,
    pub minor: ::libc::c_double,
    pub angle: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__ElementInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ElementInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ElementInfo = Struct__ElementInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PointInfo {
    pub x: ::libc::c_double,
    pub y: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__PointInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PointInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PointInfo = Struct__PointInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PrimitiveInfo {
    pub point: PointInfo,
    pub coordinates: ::libc::c_ulong,
    pub primitive: PrimitiveType,
    pub method: PaintMethod,
    pub text: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct__PrimitiveInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PrimitiveInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PrimitiveInfo = Struct__PrimitiveInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__TypeMetric {
    pub pixels_per_em: PointInfo,
    pub ascent: ::libc::c_double,
    pub descent: ::libc::c_double,
    pub width: ::libc::c_double,
    pub height: ::libc::c_double,
    pub max_advance: ::libc::c_double,
    pub bounds: SegmentInfo,
    pub underline_position: ::libc::c_double,
    pub underline_thickness: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__TypeMetric {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__TypeMetric {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TypeMetric = Struct__TypeMetric;
pub enum Struct__DrawContext { }
pub type DrawContext = *mut Struct__DrawContext;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__MagickRandomKernel {
    pub z: magick_uint32_t,
    pub w: magick_uint32_t,
}
impl ::std::clone::Clone for Struct__MagickRandomKernel {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__MagickRandomKernel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MagickRandomKernel = Struct__MagickRandomKernel;
pub type DecoderHandler =
    ::std::option::Option<extern "C" fn(arg1: *const ImageInfo,
                                        arg2: *mut ExceptionInfo)
                              -> *mut Image>;
pub type EncoderHandler =
    ::std::option::Option<extern "C" fn(arg1: *const ImageInfo,
                                        arg2: *mut Image) -> ::libc::c_uint>;
pub type MagickHandler =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_uchar,
                                        arg2: size_t) -> ::libc::c_uint>;
pub type Enum_Unnamed53 = ::libc::c_int;
pub const BrokenCoderClass: ::libc::c_int = -1;
pub const UnstableCoderClass: ::libc::c_int = 0;
pub const StableCoderClass: ::libc::c_int = 1;
pub const PrimaryCoderClass: ::libc::c_int = 2;
pub type CoderClass = Enum_Unnamed53;
pub type Enum_Unnamed54 = ::libc::c_uint;
pub const HintExtensionTreatment: ::libc::c_uint = 0;
pub const ObeyExtensionTreatment: ::libc::c_uint = 1;
pub const IgnoreExtensionTreatment: ::libc::c_uint = 2;
pub type ExtensionTreatment = Enum_Unnamed54;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__MagickInfo {
    pub next: *mut Struct__MagickInfo,
    pub previous: *mut Struct__MagickInfo,
    pub name: *const ::libc::c_char,
    pub description: *const ::libc::c_char,
    pub note: *const ::libc::c_char,
    pub version: *const ::libc::c_char,
    pub module: *const ::libc::c_char,
    pub decoder: DecoderHandler,
    pub encoder: EncoderHandler,
    pub magick: MagickHandler,
    pub client_data: *mut ::libc::c_void,
    pub adjoin: ::libc::c_uint,
    pub raw: ::libc::c_uint,
    pub stealth: ::libc::c_uint,
    pub seekable_stream: ::libc::c_uint,
    pub blob_support: ::libc::c_uint,
    pub thread_support: ::libc::c_uint,
    pub coder_class: CoderClass,
    pub extension_treatment: ExtensionTreatment,
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__MagickInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__MagickInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MagickInfo = Struct__MagickInfo;
pub type MagickMallocFunc =
    ::std::option::Option<extern "C" fn(size: size_t) -> *mut ::libc::c_void>;
pub type MagickFreeFunc =
    ::std::option::Option<extern "C" fn(ptr: *mut ::libc::c_void) -> ()>;
pub type MagickReallocFunc =
    ::std::option::Option<extern "C" fn(ptr: *mut ::libc::c_void,
                                        size: size_t) -> *mut ::libc::c_void>;
pub type MonitorHandler =
    ::std::option::Option<extern "C" fn(text: *const ::libc::c_char,
                                        quantum: magick_int64_t,
                                        span: magick_uint64_t,
                                        exception: *mut ExceptionInfo)
                              -> ::libc::c_uint>;
pub type Enum_Unnamed55 = ::libc::c_uint;
pub const UndefinedQuantumOp: ::libc::c_uint = 0;
pub const AddQuantumOp: ::libc::c_uint = 1;
pub const AndQuantumOp: ::libc::c_uint = 2;
pub const AssignQuantumOp: ::libc::c_uint = 3;
pub const DivideQuantumOp: ::libc::c_uint = 4;
pub const LShiftQuantumOp: ::libc::c_uint = 5;
pub const MultiplyQuantumOp: ::libc::c_uint = 6;
pub const OrQuantumOp: ::libc::c_uint = 7;
pub const RShiftQuantumOp: ::libc::c_uint = 8;
pub const SubtractQuantumOp: ::libc::c_uint = 9;
pub const ThresholdQuantumOp: ::libc::c_uint = 10;
pub const ThresholdBlackQuantumOp: ::libc::c_uint = 11;
pub const ThresholdWhiteQuantumOp: ::libc::c_uint = 12;
pub const XorQuantumOp: ::libc::c_uint = 13;
pub const NoiseGaussianQuantumOp: ::libc::c_uint = 14;
pub const NoiseImpulseQuantumOp: ::libc::c_uint = 15;
pub const NoiseLaplacianQuantumOp: ::libc::c_uint = 16;
pub const NoiseMultiplicativeQuantumOp: ::libc::c_uint = 17;
pub const NoisePoissonQuantumOp: ::libc::c_uint = 18;
pub const NoiseUniformQuantumOp: ::libc::c_uint = 19;
pub const NegateQuantumOp: ::libc::c_uint = 20;
pub const GammaQuantumOp: ::libc::c_uint = 21;
pub const DepthQuantumOp: ::libc::c_uint = 22;
pub const LogQuantumOp: ::libc::c_uint = 23;
pub const MaxQuantumOp: ::libc::c_uint = 24;
pub const MinQuantumOp: ::libc::c_uint = 25;
pub const PowQuantumOp: ::libc::c_uint = 26;
pub const NoiseRandomQuantumOp: ::libc::c_uint = 27;
pub const ThresholdBlackNegateQuantumOp: ::libc::c_uint = 28;
pub const ThresholdWhiteNegateQuantumOp: ::libc::c_uint = 29;
pub type QuantumOperator = Enum_Unnamed55;
pub type Enum_Unnamed56 = ::libc::c_uint;
pub const UndefinedVirtualPixelMethod: ::libc::c_uint = 0;
pub const ConstantVirtualPixelMethod: ::libc::c_uint = 1;
pub const EdgeVirtualPixelMethod: ::libc::c_uint = 2;
pub const MirrorVirtualPixelMethod: ::libc::c_uint = 3;
pub const TileVirtualPixelMethod: ::libc::c_uint = 4;
pub type VirtualPixelMethod = Enum_Unnamed56;
pub type Cache = _CacheInfoPtr_;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PixelIteratorOptions {
    pub max_threads: ::libc::c_int,
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__PixelIteratorOptions {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PixelIteratorOptions {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PixelIteratorOptions = Struct__PixelIteratorOptions;
pub type PixelIteratorMonoReadCallback =
    ::std::option::Option<extern "C" fn(mutable_data: *mut ::libc::c_void,
                                        immutable_data: *const ::libc::c_void,
                                        const_image: *const Image,
                                        pixels: *const PixelPacket,
                                        indexes: *const IndexPacket,
                                        npixels: ::libc::c_long,
                                        exception: *mut ExceptionInfo)
                              -> ::libc::c_uint>;
pub type PixelIteratorMonoModifyCallback =
    ::std::option::Option<extern "C" fn(mutable_data: *mut ::libc::c_void,
                                        immutable_data: *const ::libc::c_void,
                                        image: *mut Image,
                                        pixels: *mut PixelPacket,
                                        indexes: *mut IndexPacket,
                                        npixels: ::libc::c_long,
                                        exception: *mut ExceptionInfo)
                              -> ::libc::c_uint>;
pub type PixelIteratorDualReadCallback =
    ::std::option::Option<extern "C" fn(mutable_data: *mut ::libc::c_void,
                                        immutable_data: *const ::libc::c_void,
                                        first_image: *const Image,
                                        first_pixels: *const PixelPacket,
                                        first_indexes: *const IndexPacket,
                                        second_image: *const Image,
                                        second_pixels: *const PixelPacket,
                                        second_indexes: *const IndexPacket,
                                        npixels: ::libc::c_long,
                                        exception: *mut ExceptionInfo)
                              -> ::libc::c_uint>;
pub type PixelIteratorDualModifyCallback =
    ::std::option::Option<extern "C" fn(mutable_data: *mut ::libc::c_void,
                                        immutable_data: *const ::libc::c_void,
                                        source_image: *const Image,
                                        source_pixels: *const PixelPacket,
                                        source_indexes: *const IndexPacket,
                                        update_image: *mut Image,
                                        update_pixels: *mut PixelPacket,
                                        update_indexes: *mut IndexPacket,
                                        npixels: ::libc::c_long,
                                        exception: *mut ExceptionInfo)
                              -> ::libc::c_uint>;
pub type PixelIteratorDualNewCallback = PixelIteratorDualModifyCallback;
pub type PixelIteratorTripleModifyCallback =
    ::std::option::Option<extern "C" fn(mutable_data: *mut ::libc::c_void,
                                        immutable_data: *const ::libc::c_void,
                                        source1_image: *const Image,
                                        source1_pixels: *const PixelPacket,
                                        source1_indexes: *const IndexPacket,
                                        source2_image: *const Image,
                                        source2_pixels: *const PixelPacket,
                                        source2_indexes: *const IndexPacket,
                                        update_image: *mut Image,
                                        update_pixels: *mut PixelPacket,
                                        update_indexes: *mut IndexPacket,
                                        npixels: ::libc::c_long,
                                        exception: *mut ExceptionInfo)
                              -> ::libc::c_uint>;
pub type PixelIteratorTripleNewCallback = PixelIteratorTripleModifyCallback;
pub type ImageProfileIterator = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__QuantizeInfo {
    pub number_colors: ::libc::c_ulong,
    pub tree_depth: ::libc::c_uint,
    pub dither: ::libc::c_uint,
    pub colorspace: ColorspaceType,
    pub measure_error: ::libc::c_uint,
    pub signature: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct__QuantizeInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__QuantizeInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type QuantizeInfo = Struct__QuantizeInfo;
pub type Enum_Unnamed57 = ::libc::c_uint;
pub const UndefinedRegistryType: ::libc::c_uint = 0;
pub const ImageRegistryType: ::libc::c_uint = 1;
pub const ImageInfoRegistryType: ::libc::c_uint = 2;
pub type RegistryType = Enum_Unnamed57;
pub type Enum_Unnamed58 = ::libc::c_uint;
pub const UndefinedResource: ::libc::c_uint = 0;
pub const DiskResource: ::libc::c_uint = 1;
pub const FileResource: ::libc::c_uint = 2;
pub const MapResource: ::libc::c_uint = 3;
pub const MemoryResource: ::libc::c_uint = 4;
pub const PixelsResource: ::libc::c_uint = 5;
pub const ThreadsResource: ::libc::c_uint = 6;
pub const WidthResource: ::libc::c_uint = 7;
pub const HeightResource: ::libc::c_uint = 8;
pub type ResourceType = Enum_Unnamed58;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__SignatureInfo {
    pub digest: [::libc::c_ulong; 8usize],
    pub low_order: ::libc::c_ulong,
    pub high_order: ::libc::c_ulong,
    pub offset: ::libc::c_long,
    pub message: [::libc::c_uchar; 64usize],
}
impl ::std::clone::Clone for Struct__SignatureInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__SignatureInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SignatureInfo = Struct__SignatureInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ImageChannelStatistics {
    pub maximum: ::libc::c_double,
    pub minimum: ::libc::c_double,
    pub mean: ::libc::c_double,
    pub standard_deviation: ::libc::c_double,
    pub variance: ::libc::c_double,
}
impl ::std::clone::Clone for Struct__ImageChannelStatistics {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ImageChannelStatistics {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ImageChannelStatistics = Struct__ImageChannelStatistics;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ImageStatistics {
    pub red: ImageChannelStatistics,
    pub green: ImageChannelStatistics,
    pub blue: ImageChannelStatistics,
    pub opacity: ImageChannelStatistics,
}
impl ::std::clone::Clone for Struct__ImageStatistics {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ImageStatistics {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ImageStatistics = Struct__ImageStatistics;
pub type Enum_Unnamed59 = ::libc::c_uint;
pub const RootPath: ::libc::c_uint = 0;
pub const HeadPath: ::libc::c_uint = 1;
pub const TailPath: ::libc::c_uint = 2;
pub const BasePath: ::libc::c_uint = 3;
pub const ExtensionPath: ::libc::c_uint = 4;
pub const MagickPath: ::libc::c_uint = 5;
pub const SubImagePath: ::libc::c_uint = 6;
pub const FullPath: ::libc::c_uint = 7;
pub type PathType = Enum_Unnamed59;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__TokenInfo {
    pub state: ::libc::c_int,
    pub flag: ::libc::c_uint,
    pub offset: ::libc::c_long,
    pub quote: ::libc::c_char,
}
impl ::std::clone::Clone for Struct__TokenInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__TokenInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TokenInfo = Struct__TokenInfo;
pub type MagickTextTranslate =
    ::std::option::Option<extern "C" fn(dst: *mut ::libc::c_char,
                                        src: *const ::libc::c_char,
                                        size: size_t) -> size_t>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "GraphicsMagick")]
#[link(name = "freetype")]
#[link(name = "bz2")]
#[link(name = "z")]
#[link(name = "ltdl")]
#[link(name = "m")]
#[link(name = "pthread")]
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut __mb_cur_max: ::libc::c_int;
    pub static mut suboptarg: *mut ::libc::c_char;
}
#[link(name = "GraphicsMagick")]
#[link(name = "freetype")]
#[link(name = "bz2")]
#[link(name = "z")]
#[link(name = "ltdl")]
#[link(name = "m")]
#[link(name = "pthread")]
extern "C" {
    pub fn renameat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: ::libc::c_int, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn clearerr(arg1: *mut FILE) -> ();
    pub fn fclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn feof(arg1: *mut FILE) -> ::libc::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::libc::c_int;
    pub fn fgets(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                 arg3: *mut FILE) -> *mut ::libc::c_char;
    pub fn fopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fputc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn fputs(arg1: *const ::libc::c_char, arg2: *mut FILE)
     -> ::libc::c_int;
    pub fn fread(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut FILE) -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::libc::c_long, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::libc::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::libc::c_long;
    pub fn fwrite(arg1: *const ::libc::c_void, arg2: size_t, arg3: size_t,
                  arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn gets(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn perror(arg1: *const ::libc::c_char) -> ();
    pub fn printf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn putc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn putchar(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn puts(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn remove(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rewind(arg1: *mut FILE) -> ();
    pub fn scanf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char) -> ();
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                   arg3: ::libc::c_int, arg4: size_t) -> ::libc::c_int;
    pub fn sprintf(arg1: *mut ::libc::c_char,
                   arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ungetc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn vprintf(arg1: *const ::libc::c_char, arg2: va_list)
     -> ::libc::c_int;
    pub fn vsprintf(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn ctermid(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fdopen(arg1: ::libc::c_int, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::libc::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn popen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::libc::c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                      arg3: va_list) -> ::libc::c_int;
    pub fn __swbuf(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn __sputc(_c: ::libc::c_int, _p: *mut FILE) -> ::libc::c_int;
    pub fn flockfile(arg1: *mut FILE) -> ();
    pub fn ftrylockfile(arg1: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(arg1: *mut FILE) -> ();
    pub fn getc_unlocked(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn putc_unlocked(arg1: ::libc::c_int, arg2: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(arg1: *mut FILE) -> ::libc::c_int;
    pub fn putw(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn tempnam(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                    arg3: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn vscanf(arg1: *const ::libc::c_char, arg2: va_list)
     -> ::libc::c_int;
    pub fn vsnprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                     arg3: *const ::libc::c_char, arg4: va_list)
     -> ::libc::c_int;
    pub fn vsscanf(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn dprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn vdprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn getdelim(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                    arg3: ::libc::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn getline(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                   arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut ::libc::c_char,
                    arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn ctermid_r(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::libc::c_char;
    pub fn fmtcheck(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::libc::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                     arg3: ::libc::c_int) -> ();
    pub fn setlinebuf(arg1: *mut FILE) -> ::libc::c_int;
    pub fn vasprintf(arg1: *mut *mut ::libc::c_char,
                     arg2: *const ::libc::c_char, arg3: va_list)
     -> ::libc::c_int;
    pub fn zopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                 arg3: ::libc::c_int) -> *mut FILE;
    pub fn funopen(arg1: *const ::libc::c_void,
                   arg2:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *mut ::libc::c_char,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg3:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_char,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg4:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2: fpos_t,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void)
                                                 -> ::libc::c_int>)
     -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                         arg3: size_t, arg4: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn __snprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                          arg3: ::libc::c_int, arg4: size_t,
                          arg5: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn __vsprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                          arg3: size_t, arg4: *const ::libc::c_char,
                          arg5: va_list) -> ::libc::c_int;
    pub fn __vsnprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                           arg3: ::libc::c_int, arg4: size_t,
                           arg5: *const ::libc::c_char, arg6: va_list)
     -> ::libc::c_int;
    pub fn signal(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                                -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn getpriority(arg1: ::libc::c_int, arg2: id_t) -> ::libc::c_int;
    pub fn getiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getrlimit(arg1: ::libc::c_int, arg2: *mut Struct_rlimit)
     -> ::libc::c_int;
    pub fn getrusage(arg1: ::libc::c_int, arg2: *mut Struct_rusage)
     -> ::libc::c_int;
    pub fn setpriority(arg1: ::libc::c_int, arg2: id_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setrlimit(arg1: ::libc::c_int, arg2: *const Struct_rlimit)
     -> ::libc::c_int;
    pub fn wait(arg1: *mut ::libc::c_int) -> pid_t;
    pub fn waitpid(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int)
     -> pid_t;
    pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t,
                  arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn wait3(arg1: *mut ::libc::c_int, arg2: ::libc::c_int,
                 arg3: *mut Struct_rusage) -> pid_t;
    pub fn wait4(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int,
                 arg4: *mut Struct_rusage) -> pid_t;
    pub fn alloca(arg1: size_t) -> *mut ::libc::c_void;
    pub fn abort() -> ();
    pub fn abs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn atof(arg1: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(arg1: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn bsearch(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t, arg4: size_t,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *const ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>)
     -> *mut ::libc::c_void;
    pub fn calloc(arg1: size_t, arg2: size_t) -> *mut ::libc::c_void;
    pub fn div(arg1: ::libc::c_int, arg2: ::libc::c_int) -> div_t;
    pub fn exit(arg1: ::libc::c_int) -> ();
    pub fn free(arg1: *mut ::libc::c_void) -> ();
    pub fn getenv(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn labs(arg1: ::libc::c_long) -> ::libc::c_long;
    pub fn ldiv(arg1: ::libc::c_long, arg2: ::libc::c_long) -> ldiv_t;
    pub fn llabs(arg1: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn lldiv(arg1: ::libc::c_longlong, arg2: ::libc::c_longlong)
     -> lldiv_t;
    pub fn malloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn mblen(arg1: *const ::libc::c_char, arg2: size_t) -> ::libc::c_int;
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                    arg3: size_t) -> size_t;
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                  arg3: size_t) -> ::libc::c_int;
    pub fn posix_memalign(arg1: *mut *mut ::libc::c_void, arg2: size_t,
                          arg3: size_t) -> ::libc::c_int;
    pub fn qsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn(arg1:
                                                             *const ::libc::c_void,
                                                         arg2:
                                                             *const ::libc::c_void)
                                               -> ::libc::c_int>) -> ();
    pub fn rand() -> ::libc::c_int;
    pub fn realloc(arg1: *mut ::libc::c_void, arg2: size_t)
     -> *mut ::libc::c_void;
    pub fn srand(arg1: ::libc::c_uint) -> ();
    pub fn strtod(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_double;
    pub fn strtof(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_float;
    pub fn strtol(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_long;
    pub fn strtold(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtoll(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoul(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoull(arg1: *const ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn system(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn wcstombs(arg1: *mut ::libc::c_char, arg2: *const wchar_t,
                    arg3: size_t) -> size_t;
    pub fn wctomb(arg1: *mut ::libc::c_char, arg2: wchar_t) -> ::libc::c_int;
    pub fn _Exit(arg1: ::libc::c_int) -> ();
    pub fn a64l(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn drand48() -> ::libc::c_double;
    pub fn ecvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn erand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn fcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn getsubopt(arg1: *mut *mut ::libc::c_char,
                     arg2: *const *mut ::libc::c_char,
                     arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn grantpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn initstate(arg1: ::libc::c_uint, arg2: *mut ::libc::c_char,
                     arg3: size_t) -> *mut ::libc::c_char;
    pub fn jrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn l64a(arg1: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn lcong48(arg1: *mut ::libc::c_ushort) -> ();
    pub fn lrand48() -> ::libc::c_long;
    pub fn mktemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mrand48() -> ::libc::c_long;
    pub fn nrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn posix_openpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ptsname(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn putenv(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn random() -> ::libc::c_long;
    pub fn rand_r(arg1: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn realpath(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn seed48(arg1: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn setenv(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setkey(arg1: *const ::libc::c_char) -> ();
    pub fn setstate(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn srand48(arg1: ::libc::c_long) -> ();
    pub fn srandom(arg1: ::libc::c_uint) -> ();
    pub fn unlockpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn unsetenv(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn arc4random() -> u_int32_t;
    pub fn arc4random_addrandom(arg1: *mut ::libc::c_uchar,
                                arg2: ::libc::c_int) -> ();
    pub fn arc4random_buf(arg1: *mut ::libc::c_void, arg2: size_t) -> ();
    pub fn arc4random_stir() -> ();
    pub fn arc4random_uniform(arg1: u_int32_t) -> u_int32_t;
    pub fn atexit_b(arg1: ::libc::c_void) -> ::libc::c_int;
    pub fn bsearch_b(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                     arg3: size_t, arg4: size_t, arg5: ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn cgetcap(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn cgetclose() -> ::libc::c_int;
    pub fn cgetent(arg1: *mut *mut ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char,
                   arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetfirst(arg1: *mut *mut ::libc::c_char,
                     arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetmatch(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn cgetnext(arg1: *mut *mut ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetnum(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn cgetset(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetstr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetustr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn daemon(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::libc::c_char;
    pub fn devname_r(arg1: dev_t, arg2: mode_t, buf: *mut ::libc::c_char,
                     len: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn getbsize(arg1: *mut ::libc::c_int, arg2: *mut ::libc::c_long)
     -> *mut ::libc::c_char;
    pub fn getloadavg(arg1: *mut ::libc::c_double, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getprogname() -> *const ::libc::c_char;
    pub fn heapsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                    arg4:
                        ::std::option::Option<extern "C" fn(arg1:
                                                                *const ::libc::c_void,
                                                            arg2:
                                                                *const ::libc::c_void)
                                                  -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn heapsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                      arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn mergesort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                     arg4:
                         ::std::option::Option<extern "C" fn(arg1:
                                                                 *const ::libc::c_void,
                                                             arg2:
                                                                 *const ::libc::c_void)
                                                   -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn mergesort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                       arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn psort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn(arg1:
                                                             *const ::libc::c_void,
                                                         arg2:
                                                             *const ::libc::c_void)
                                               -> ::libc::c_int>) -> ();
    pub fn psort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void) -> ();
    pub fn psort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void,
                                                           arg3:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>) -> ();
    pub fn qsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void) -> ();
    pub fn qsort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void,
                                                           arg3:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>) -> ();
    pub fn radixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                     arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn setprogname(arg1: *const ::libc::c_char) -> ();
    pub fn sradixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                      arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sranddev() -> ();
    pub fn srandomdev() -> ();
    pub fn reallocf(arg1: *mut ::libc::c_void, arg2: size_t)
     -> *mut ::libc::c_void;
    pub fn strtoq(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_longlong;
    pub fn strtouq(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn valloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn RGBTransformImage(arg1: ImagePtr, arg2: ColorspaceType)
     -> ::libc::c_uint;
    pub fn TransformColorspace(arg1: ImagePtr, arg2: ColorspaceType)
     -> ::libc::c_uint;
    pub fn TransformRGBImage(arg1: ImagePtr, arg2: ColorspaceType)
     -> ::libc::c_uint;
    pub fn GetLocaleExceptionMessage(arg1: ExceptionType,
                                     arg2: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn GetLocaleMessage(arg1: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn SetErrorHandler(arg1: ErrorHandler) -> ErrorHandler;
    pub fn SetFatalErrorHandler(arg1: FatalErrorHandler) -> FatalErrorHandler;
    pub fn CatchException(arg1: *const ExceptionInfo) -> ();
    pub fn CopyException(copy: *mut ExceptionInfo,
                         original: *const ExceptionInfo) -> ();
    pub fn DestroyExceptionInfo(arg1: *mut ExceptionInfo) -> ();
    pub fn GetExceptionInfo(arg1: *mut ExceptionInfo) -> ();
    pub fn MagickError(arg1: ExceptionType, arg2: *const ::libc::c_char,
                       arg3: *const ::libc::c_char) -> ();
    pub fn MagickFatalError(arg1: ExceptionType, arg2: *const ::libc::c_char,
                            arg3: *const ::libc::c_char) -> ();
    pub fn MagickWarning(arg1: ExceptionType, arg2: *const ::libc::c_char,
                         arg3: *const ::libc::c_char) -> ();
    pub fn _MagickError(arg1: ExceptionType, arg2: *const ::libc::c_char,
                        arg3: *const ::libc::c_char) -> ();
    pub fn _MagickFatalError(arg1: ExceptionType, arg2: *const ::libc::c_char,
                             arg3: *const ::libc::c_char) -> ();
    pub fn _MagickWarning(arg1: ExceptionType, arg2: *const ::libc::c_char,
                          arg3: *const ::libc::c_char) -> ();
    pub fn SetExceptionInfo(arg1: *mut ExceptionInfo, arg2: ExceptionType)
     -> ();
    pub fn ThrowException(arg1: *mut ExceptionInfo, arg2: ExceptionType,
                          arg3: *const ::libc::c_char,
                          arg4: *const ::libc::c_char) -> ();
    pub fn ThrowLoggedException(exception: *mut ExceptionInfo,
                                severity: ExceptionType,
                                reason: *const ::libc::c_char,
                                description: *const ::libc::c_char,
                                module: *const ::libc::c_char,
                                function: *const ::libc::c_char,
                                line: ::libc::c_ulong) -> ();
    pub fn SetWarningHandler(arg1: WarningHandler) -> WarningHandler;
    pub fn IsEventLogging() -> ::libc::c_uint;
    pub fn LogMagickEvent(_type: ExceptionType, module: *const ::libc::c_char,
                          function: *const ::libc::c_char,
                          line: ::libc::c_ulong,
                          format: *const ::libc::c_char, ...)
     -> ::libc::c_uint;
    pub fn LogMagickEventList(_type: ExceptionType,
                              module: *const ::libc::c_char,
                              function: *const ::libc::c_char,
                              line: ::libc::c_ulong,
                              format: *const ::libc::c_char,
                              operands: va_list) -> ::libc::c_uint;
    pub fn SetLogEventMask(events: *const ::libc::c_char) -> ::libc::c_ulong;
    pub fn SetLogFormat(format: *const ::libc::c_char) -> ();
    pub fn SetLogMethod(arg1: LogMethod) -> ();
    pub fn GetElapsedTime(arg1: *mut TimerInfo) -> ::libc::c_double;
    pub fn GetUserTime(arg1: *mut TimerInfo) -> ::libc::c_double;
    pub fn GetTimerResolution() -> ::libc::c_double;
    pub fn ContinueTimer(arg1: *mut TimerInfo) -> ::libc::c_uint;
    pub fn GetTimerInfo(arg1: *mut TimerInfo) -> ();
    pub fn ResetTimer(arg1: *mut TimerInfo) -> ();
    pub fn CatchImageException(arg1: *mut Image) -> ExceptionType;
    pub fn AllocateImage(arg1: *const ImageInfo) -> *mut Image;
    pub fn AppendImages(arg1: *const Image, arg2: ::libc::c_uint,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn CloneImage(arg1: *const Image, arg2: ::libc::c_ulong,
                      arg3: ::libc::c_ulong, arg4: ::libc::c_uint,
                      arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn GetImageClipMask(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ReferenceImage(arg1: *mut Image) -> *mut Image;
    pub fn CloneImageInfo(arg1: *const ImageInfo) -> *mut ImageInfo;
    pub fn AccessDefinition(image_info: *const ImageInfo,
                            magick: *const ::libc::c_char,
                            key: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn GetImageGeometry(arg1: *const Image, arg2: *const ::libc::c_char,
                            arg3: ::libc::c_uint, arg4: *mut RectangleInfo)
     -> ::libc::c_int;
    pub fn IsTaintImage(arg1: *const Image) -> ::libc::c_uint;
    pub fn IsSubimage(arg1: *const ::libc::c_char, arg2: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn AddDefinition(image_info: *mut ImageInfo,
                         magick: *const ::libc::c_char,
                         key: *const ::libc::c_char,
                         value: *const ::libc::c_char,
                         exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn AddDefinitions(image_info: *mut ImageInfo,
                          options: *const ::libc::c_char,
                          exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn AnimateImages(image_info: *const ImageInfo, image: *mut Image)
     -> ::libc::c_uint;
    pub fn ClipImage(image: *mut Image) -> ::libc::c_uint;
    pub fn ClipPathImage(image: *mut Image, pathname: *const ::libc::c_char,
                         inside: ::libc::c_uint) -> ::libc::c_uint;
    pub fn DisplayImages(image_info: *const ImageInfo, image: *mut Image)
     -> ::libc::c_uint;
    pub fn RemoveDefinitions(image_info: *const ImageInfo,
                             options: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn ResetImagePage(image: *mut Image, page: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn SetImage(image: *mut Image, arg1: Quantum) -> ::libc::c_uint;
    pub fn SetImageEx(image: *mut Image, opacity: Quantum,
                      exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn SetImageColor(image: *mut Image, pixel: *const PixelPacket)
     -> ::libc::c_uint;
    pub fn SetImageColorRegion(image: *mut Image, x: ::libc::c_long,
                               y: ::libc::c_long, width: ::libc::c_ulong,
                               height: ::libc::c_ulong,
                               pixel: *const PixelPacket) -> ::libc::c_uint;
    pub fn SetImageClipMask(image: *mut Image, clip_mask: *const Image)
     -> ::libc::c_uint;
    pub fn SetImageDepth(image: *mut Image, arg1: ::libc::c_ulong)
     -> ::libc::c_uint;
    pub fn SetImageInfo(image_info: *mut ImageInfo, flags: ::libc::c_uint,
                        exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn SetImageType(image: *mut Image, arg1: ImageType) -> ::libc::c_uint;
    pub fn StripImage(image: *mut Image) -> ::libc::c_uint;
    pub fn SyncImage(image: *mut Image) -> ::libc::c_uint;
    pub fn AllocateNextImage(arg1: *const ImageInfo, arg2: *mut Image) -> ();
    pub fn DestroyImage(arg1: *mut Image) -> ();
    pub fn DestroyImageInfo(arg1: *mut ImageInfo) -> ();
    pub fn GetImageException(arg1: *mut Image, arg2: *mut ExceptionInfo)
     -> ();
    pub fn GetImageInfo(arg1: *mut ImageInfo) -> ();
    pub fn ModifyImage(arg1: *mut *mut Image, arg2: *mut ExceptionInfo) -> ();
    pub fn SetImageOpacity(arg1: *mut Image, arg2: ::libc::c_uint) -> ();
    pub fn GetImageCharacteristics(image: *const Image,
                                   characteristics: *mut ImageCharacteristics,
                                   optimize: ::libc::c_uint,
                                   exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn GetImageDepth(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> ::libc::c_ulong;
    pub fn IsGrayImage(image: *const Image, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn IsMonochromeImage(image: *const Image,
                             exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn IsOpaqueImage(image: *const Image, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn GetImageType(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> ImageType;
    pub fn GetImageBoundingBox(arg1: *const Image,
                               exception: *mut ExceptionInfo)
     -> RectangleInfo;
    pub fn GetImageAttribute(image: *const Image, key: *const ::libc::c_char)
     -> *const ImageAttribute;
    pub fn GetImageClippingPathAttribute(image: *const Image)
     -> *const ImageAttribute;
    pub fn GetImageInfoAttribute(image_info: *const ImageInfo,
                                 image: *const Image,
                                 key: *const ::libc::c_char)
     -> *const ImageAttribute;
    pub fn CloneImageAttributes(clone_image: *mut Image,
                                original_image: *const Image)
     -> ::libc::c_uint;
    pub fn SetImageAttribute(image: *mut Image, key: *const ::libc::c_char,
                             value: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn DestroyImageAttributes(image: *mut Image) -> ();
    pub fn AverageImages(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> *mut Image;
    pub fn CloneBlobInfo(blob_info: *const BlobInfo) -> *mut BlobInfo;
    pub fn ReferenceBlob(blob: *mut BlobInfo) -> *mut BlobInfo;
    pub fn DestroyBlobInfo(blob: *mut BlobInfo) -> ();
    pub fn DetachBlob(blob: *mut BlobInfo) -> ();
    pub fn GetBlobInfo(blob: *mut BlobInfo) -> ();
    pub fn AttachBlob(blob_info: *mut BlobInfo, blob: *const ::libc::c_void,
                      length: size_t) -> ();
    pub fn DestroyBlob(image: *mut Image) -> ();
    pub fn BlobToImage(image_info: *const ImageInfo,
                       blob: *const ::libc::c_void, length: size_t,
                       exception: *mut ExceptionInfo) -> *mut Image;
    pub fn PingBlob(image_info: *const ImageInfo, blob: *const ::libc::c_void,
                    length: size_t, exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ImageToBlob(image_info: *const ImageInfo, image: *mut Image,
                       length: *mut size_t, exception: *mut ExceptionInfo)
     -> *mut ::libc::c_void;
    pub fn OpenBlob(image_info: *const ImageInfo, image: *mut Image,
                    mode: BlobMode, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn CloseBlob(image: *mut Image) -> ();
    pub fn ReadBlob(image: *mut Image, length: size_t,
                    data: *mut ::libc::c_void) -> size_t;
    pub fn ReadBlobZC(image: *mut Image, length: size_t,
                      data: *mut *mut ::libc::c_void) -> size_t;
    pub fn WriteBlob(image: *mut Image, length: size_t,
                     data: *const ::libc::c_void) -> size_t;
    pub fn SeekBlob(image: *mut Image, offset: magick_off_t,
                    whence: ::libc::c_int) -> magick_off_t;
    pub fn TellBlob(image: *const Image) -> magick_off_t;
    pub fn EOFBlob(image: *const Image) -> ::libc::c_int;
    pub fn GetBlobStatus(image: *const Image) -> ::libc::c_int;
    pub fn GetBlobIsOpen(image: *const Image) -> ::libc::c_uint;
    pub fn GetBlobSize(image: *const Image) -> magick_off_t;
    pub fn GetBlobFileHandle(image: *const Image) -> *mut FILE;
    pub fn GetBlobStreamData(image: *const Image) -> *mut ::libc::c_uchar;
    pub fn ReadBlobByte(image: *mut Image) -> ::libc::c_int;
    pub fn ReadBlobLSBShort(image: *mut Image) -> magick_uint16_t;
    pub fn ReadBlobLSBShorts(image: *mut Image, octets: size_t,
                             data: *mut magick_uint16_t) -> size_t;
    pub fn ReadBlobMSBShort(image: *mut Image) -> magick_uint16_t;
    pub fn ReadBlobMSBShorts(image: *mut Image, octets: size_t,
                             data: *mut magick_uint16_t) -> size_t;
    pub fn ReadBlobLSBLong(image: *mut Image) -> magick_uint32_t;
    pub fn ReadBlobLSBLongs(image: *mut Image, octets: size_t,
                            data: *mut magick_uint32_t) -> size_t;
    pub fn ReadBlobMSBLong(image: *mut Image) -> magick_uint32_t;
    pub fn ReadBlobMSBLongs(image: *mut Image, octets: size_t,
                            data: *mut magick_uint32_t) -> size_t;
    pub fn ReadBlobLSBFloat(image: *mut Image) -> ::libc::c_float;
    pub fn ReadBlobLSBFloats(image: *mut Image, octets: size_t,
                             data: *mut ::libc::c_float) -> size_t;
    pub fn ReadBlobMSBFloat(image: *mut Image) -> ::libc::c_float;
    pub fn ReadBlobMSBFloats(image: *mut Image, octets: size_t,
                             data: *mut ::libc::c_float) -> size_t;
    pub fn ReadBlobLSBDouble(image: *mut Image) -> ::libc::c_double;
    pub fn ReadBlobLSBDoubles(image: *mut Image, octets: size_t,
                              data: *mut ::libc::c_double) -> size_t;
    pub fn ReadBlobMSBDouble(image: *mut Image) -> ::libc::c_double;
    pub fn ReadBlobMSBDoubles(image: *mut Image, octets: size_t,
                              data: *mut ::libc::c_double) -> size_t;
    pub fn ReadBlobString(image: *mut Image, string: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn WriteBlobByte(image: *mut Image, value: magick_uint8_t) -> size_t;
    pub fn WriteBlobFile(image: *mut Image, filename: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn WriteBlobLSBShort(image: *mut Image, value: magick_uint16_t)
     -> size_t;
    pub fn WriteBlobLSBLong(image: *mut Image, value: magick_uint32_t)
     -> size_t;
    pub fn WriteBlobMSBLong(image: *mut Image, value: magick_uint32_t)
     -> size_t;
    pub fn WriteBlobMSBShort(image: *mut Image, value: magick_uint16_t)
     -> size_t;
    pub fn WriteBlobString(image: *mut Image, string: *const ::libc::c_char)
     -> size_t;
    pub fn BlobIsSeekable(image: *const Image) -> ::libc::c_uint;
    pub fn SetBlobClosable(image: *mut Image, closable: ::libc::c_uint) -> ();
    pub fn SetBlobTemporary(image: *mut Image, isTemporary: ::libc::c_uint)
     -> ();
    pub fn GetBlobTemporary(image: *const Image) -> ::libc::c_uint;
    pub fn UnmapBlob(map: *mut ::libc::c_void, length: size_t)
     -> ::libc::c_uint;
    pub fn MapBlob(file: ::libc::c_int, mode: MapMode, offset: magick_off_t,
                   length: size_t) -> *mut ::libc::c_void;
    pub fn BlobToFile(filename: *const ::libc::c_char,
                      blob: *const ::libc::c_void, length: size_t,
                      exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn FileToBlob(filename: *const ::libc::c_char, length: *mut size_t,
                      exception: *mut ExceptionInfo) -> *mut ::libc::c_void;
    pub fn BlobReserveSize(image: *mut Image, size: magick_off_t)
     -> ::libc::c_uint;
    pub fn ImageToFile(image: *mut Image, filename: *const ::libc::c_char,
                       exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn GetConfigureBlob(filename: *const ::libc::c_char,
                            path: *mut ::libc::c_char, length: *mut size_t,
                            exception: *mut ExceptionInfo)
     -> *mut ::libc::c_void;
    pub fn MSBOrderLong(buffer: *mut ::libc::c_uchar, length: size_t) -> ();
    pub fn MSBOrderShort(p: *mut ::libc::c_uchar, length: size_t) -> ();
    pub fn DisassociateBlob(arg1: *mut Image) -> ();
    pub fn CdlImage(image: *mut Image, cdl: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn ExportImageChannel(image: *const Image, channel: ChannelType,
                              exception: *mut ExceptionInfo) -> *mut Image;
    pub fn GetImageChannelDepth(image: *const Image, channel: ChannelType,
                                exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn ChannelImage(image: *mut Image, channel: ChannelType)
     -> ::libc::c_uint;
    pub fn ImportImageChannel(src_image: *const Image, dst_image: *mut Image,
                              channel: ChannelType) -> ::libc::c_uint;
    pub fn ImportImageChannelsMasked(source_image: *const Image,
                                     update_image: *mut Image,
                                     channels: ChannelType) -> ::libc::c_uint;
    pub fn SetImageChannelDepth(image: *mut Image, channel: ChannelType,
                                depth: ::libc::c_uint) -> ::libc::c_uint;
    pub fn GetColorHistogram(image: *const Image,
                             colors: *mut ::libc::c_ulong,
                             exception: *mut ExceptionInfo)
     -> *mut HistogramColorPacket;
    pub fn GetNumberColors(image: *const Image, file: *mut FILE,
                           exception: *mut ExceptionInfo) -> ::libc::c_ulong;
    pub fn GetColorTuple(color: *const PixelPacket, depth: ::libc::c_uint,
                         matte: ::libc::c_uint, hex: ::libc::c_uint,
                         tuple: *mut ::libc::c_char) -> ();
    pub fn IsPaletteImage(image: *const Image, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn GetColorList(pattern: *const ::libc::c_char,
                        number_colors: *mut ::libc::c_ulong)
     -> *mut *mut ::libc::c_char;
    pub fn QueryColorDatabase(name: *const ::libc::c_char,
                              color: *mut PixelPacket,
                              exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn QueryColorname(image: *const Image, color: *const PixelPacket,
                          compliance: ComplianceType,
                          name: *mut ::libc::c_char,
                          exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn AllocateImageColormap(arg1: *mut Image, arg2: ::libc::c_ulong)
     -> ::libc::c_uint;
    pub fn CycleColormapImage(image: *mut Image, amount: ::libc::c_int)
     -> ::libc::c_uint;
    pub fn ReplaceImageColormap(image: *mut Image,
                                colormap: *const PixelPacket,
                                colors: ::libc::c_uint) -> ::libc::c_uint;
    pub fn SortColormapByIntensity(arg1: *mut Image) -> ::libc::c_uint;
    pub fn AnimateImageCommand(image_info: *mut ImageInfo,
                               argc: ::libc::c_int,
                               argv: *mut *mut ::libc::c_char,
                               metadata: *mut *mut ::libc::c_char,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn BenchmarkImageCommand(image_info: *mut ImageInfo,
                                 argc: ::libc::c_int,
                                 argv: *mut *mut ::libc::c_char,
                                 metadata: *mut *mut ::libc::c_char,
                                 exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn CompareImageCommand(image_info: *mut ImageInfo,
                               argc: ::libc::c_int,
                               argv: *mut *mut ::libc::c_char,
                               metadata: *mut *mut ::libc::c_char,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn CompositeImageCommand(image_info: *mut ImageInfo,
                                 argc: ::libc::c_int,
                                 argv: *mut *mut ::libc::c_char,
                                 metadata: *mut *mut ::libc::c_char,
                                 exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn ConjureImageCommand(image_info: *mut ImageInfo,
                               argc: ::libc::c_int,
                               argv: *mut *mut ::libc::c_char,
                               metadata: *mut *mut ::libc::c_char,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn ConvertImageCommand(image_info: *mut ImageInfo,
                               argc: ::libc::c_int,
                               argv: *mut *mut ::libc::c_char,
                               metadata: *mut *mut ::libc::c_char,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn DisplayImageCommand(image_info: *mut ImageInfo,
                               argc: ::libc::c_int,
                               argv: *mut *mut ::libc::c_char,
                               metadata: *mut *mut ::libc::c_char,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn IdentifyImageCommand(image_info: *mut ImageInfo,
                                argc: ::libc::c_int,
                                argv: *mut *mut ::libc::c_char,
                                metadata: *mut *mut ::libc::c_char,
                                exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn ImportImageCommand(image_info: *mut ImageInfo, argc: ::libc::c_int,
                              argv: *mut *mut ::libc::c_char,
                              metadata: *mut *mut ::libc::c_char,
                              exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn MagickCommand(image_info: *mut ImageInfo, argc: ::libc::c_int,
                         argv: *mut *mut ::libc::c_char,
                         metadata: *mut *mut ::libc::c_char,
                         exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn MogrifyImage(arg1: *const ImageInfo, arg2: ::libc::c_int,
                        arg3: *mut *mut ::libc::c_char, arg4: *mut *mut Image)
     -> ::libc::c_uint;
    pub fn MogrifyImageCommand(image_info: *mut ImageInfo,
                               argc: ::libc::c_int,
                               argv: *mut *mut ::libc::c_char,
                               metadata: *mut *mut ::libc::c_char,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn MogrifyImages(arg1: *const ImageInfo, arg2: ::libc::c_int,
                         arg3: *mut *mut ::libc::c_char,
                         arg4: *mut *mut Image) -> ::libc::c_uint;
    pub fn MontageImageCommand(image_info: *mut ImageInfo,
                               argc: ::libc::c_int,
                               argv: *mut *mut ::libc::c_char,
                               metadata: *mut *mut ::libc::c_char,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn TimeImageCommand(image_info: *mut ImageInfo, argc: ::libc::c_int,
                            argv: *mut *mut ::libc::c_char,
                            metadata: *mut *mut ::libc::c_char,
                            exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn GMCommand(argc: ::libc::c_int, argv: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn InitializeDifferenceImageOptions(options:
                                                *mut DifferenceImageOptions,
                                            exception: *mut ExceptionInfo)
     -> ();
    pub fn DifferenceImage(reference_image: *const Image,
                           compare_image: *const Image,
                           difference_options: *const DifferenceImageOptions,
                           exception: *mut ExceptionInfo) -> *mut Image;
    pub fn InitializeDifferenceStatistics(difference_statistics:
                                              *mut DifferenceStatistics,
                                          exception: *mut ExceptionInfo)
     -> ();
    pub fn GetImageChannelDifference(reference_image: *const Image,
                                     compare_image: *const Image,
                                     metric: MetricType,
                                     statistics: *mut DifferenceStatistics,
                                     exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn GetImageChannelDistortion(reference_image: *const Image,
                                     compare_image: *const Image,
                                     channel: ChannelType, metric: MetricType,
                                     distortion: *mut ::libc::c_double,
                                     exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn GetImageDistortion(reference_image: *const Image,
                              compare_image: *const Image, metric: MetricType,
                              distortion: *mut ::libc::c_double,
                              exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn IsImagesEqual(arg1: *mut Image, arg2: *const Image)
     -> ::libc::c_uint;
    pub fn CompositeImage(canvas_image: *mut Image,
                          compose: CompositeOperator,
                          update_image: *const Image,
                          x_offset: ::libc::c_long, y_offset: ::libc::c_long)
     -> ::libc::c_uint;
    pub fn CompositeImageRegion(compose: CompositeOperator,
                                options: *const CompositeOptions_t,
                                columns: ::libc::c_ulong,
                                rows: ::libc::c_ulong,
                                update_image: *const Image,
                                update_x: ::libc::c_long,
                                update_y: ::libc::c_long,
                                canvas_image: *mut Image,
                                canvas_x: ::libc::c_long,
                                canvas_y: ::libc::c_long,
                                exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn MagickCompositeImageUnderColor(image: *mut Image,
                                          undercolor: *const PixelPacket,
                                          exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn Ascii85WriteByteHook(image: *mut Image, code: magick_uint8_t,
                                info: *mut ::libc::c_void) -> ::libc::c_uint;
    pub fn BlobWriteByteHook(image: *mut Image, code: magick_uint8_t,
                             info: *mut ::libc::c_void) -> ::libc::c_uint;
    pub fn HuffmanDecodeImage(image: *mut Image) -> ::libc::c_uint;
    pub fn HuffmanEncodeImage(image_info: *const ImageInfo, image: *mut Image)
     -> ::libc::c_uint;
    pub fn HuffmanEncode2Image(image_info: *const ImageInfo,
                               image: *mut Image, write_byte: WriteByteHook,
                               info: *mut ::libc::c_void) -> ::libc::c_uint;
    pub fn LZWEncodeImage(image: *mut Image, length: size_t,
                          pixels: *mut magick_uint8_t) -> ::libc::c_uint;
    pub fn LZWEncode2Image(image: *mut Image, length: size_t,
                           pixels: *mut magick_uint8_t,
                           write_byte: WriteByteHook,
                           info: *mut ::libc::c_void) -> ::libc::c_uint;
    pub fn PackbitsEncodeImage(image: *mut Image, length: size_t,
                               pixels: *mut magick_uint8_t) -> ::libc::c_uint;
    pub fn PackbitsEncode2Image(image: *mut Image, length: size_t,
                                pixels: *mut magick_uint8_t,
                                write_byte: WriteByteHook,
                                info: *mut ::libc::c_void) -> ::libc::c_uint;
    pub fn ImageToHuffman2DBlob(image: *const Image,
                                image_info: *const ImageInfo,
                                length: *mut size_t,
                                exception: *mut ExceptionInfo)
     -> *mut ::libc::c_uchar;
    pub fn ImageToJPEGBlob(image: *const Image, image_info: *const ImageInfo,
                           length: *mut size_t, exception: *mut ExceptionInfo)
     -> *mut ::libc::c_uchar;
    pub fn Ascii85Encode(image: *mut Image, code: magick_uint8_t) -> ();
    pub fn Ascii85Flush(image: *mut Image) -> ();
    pub fn Ascii85Initialize(image: *mut Image) -> ();
    pub fn MagickConfirmAccess(mode: ConfirmAccessMode,
                               path: *const ::libc::c_char,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn MagickSetConfirmAccessHandler(handler: ConfirmAccessHandler)
     -> ConfirmAccessHandler;
    pub fn StorageTypeToString(storage_type: StorageType)
     -> *const ::libc::c_char;
    pub fn QuantumSampleTypeToString(sample_type: QuantumSampleType)
     -> *const ::libc::c_char;
    pub fn QuantumTypeToString(quantum_type: QuantumType)
     -> *const ::libc::c_char;
    pub fn ConstituteImage(width: ::libc::c_ulong, height: ::libc::c_ulong,
                           map: *const ::libc::c_char, _type: StorageType,
                           pixels: *const ::libc::c_void,
                           exception: *mut ExceptionInfo) -> *mut Image;
    pub fn ConstituteTextureImage(columns: ::libc::c_ulong,
                                  rows: ::libc::c_ulong,
                                  texture: *const Image,
                                  exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn PingImage(image_info: *const ImageInfo,
                     exception: *mut ExceptionInfo) -> *mut Image;
    pub fn ReadImage(image_info: *const ImageInfo,
                     exception: *mut ExceptionInfo) -> *mut Image;
    pub fn ReadInlineImage(image_info: *const ImageInfo,
                           content: *const ::libc::c_char,
                           exception: *mut ExceptionInfo) -> *mut Image;
    pub fn DispatchImage(image: *const Image, x_offset: ::libc::c_long,
                         y_offset: ::libc::c_long, columns: ::libc::c_ulong,
                         rows: ::libc::c_ulong, map: *const ::libc::c_char,
                         _type: StorageType, pixels: *mut ::libc::c_void,
                         exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn ExportImagePixelArea(image: *const Image,
                                quantum_type: QuantumType,
                                quantum_size: ::libc::c_uint,
                                destination: *mut ::libc::c_uchar,
                                options: *const ExportPixelAreaOptions,
                                export_info: *mut ExportPixelAreaInfo)
     -> ::libc::c_uint;
    pub fn ExportViewPixelArea(view: *const ViewInfo,
                               quantum_type: QuantumType,
                               quantum_size: ::libc::c_uint,
                               destination: *mut ::libc::c_uchar,
                               options: *const ExportPixelAreaOptions,
                               export_info: *mut ExportPixelAreaInfo)
     -> ::libc::c_uint;
    pub fn ImportImagePixelArea(image: *mut Image, quantum_type: QuantumType,
                                quantum_size: ::libc::c_uint,
                                source: *const ::libc::c_uchar,
                                options: *const ImportPixelAreaOptions,
                                import_info: *mut ImportPixelAreaInfo)
     -> ::libc::c_uint;
    pub fn ImportViewPixelArea(view: *mut ViewInfo, quantum_type: QuantumType,
                               quantum_size: ::libc::c_uint,
                               source: *const ::libc::c_uchar,
                               options: *const ImportPixelAreaOptions,
                               import_info: *mut ImportPixelAreaInfo)
     -> ::libc::c_uint;
    pub fn WriteImage(image_info: *const ImageInfo, image: *mut Image)
     -> ::libc::c_uint;
    pub fn WriteImages(image_info: *const ImageInfo, image: *mut Image,
                       filename: *const ::libc::c_char,
                       exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn WriteImagesFile(image_info: *const ImageInfo, image: *mut Image,
                           file: *mut FILE, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn ExportPixelAreaOptionsInit(options: *mut ExportPixelAreaOptions)
     -> ();
    pub fn ImportPixelAreaOptionsInit(options: *mut ImportPixelAreaOptions)
     -> ();
    pub fn MagickFindRawImageMinMax(image: *mut Image, endian: EndianType,
                                    width: ::libc::c_ulong,
                                    height: ::libc::c_ulong,
                                    _type: StorageType,
                                    scanline_octets: ::libc::c_uint,
                                    scanline_buffer: *mut ::libc::c_void,
                                    min: *mut ::libc::c_double,
                                    max: *mut ::libc::c_double)
     -> ::libc::c_uint;
    pub fn MagickGetQuantumSamplesPerPixel(quantum_type: QuantumType)
     -> ::libc::c_uint;
    pub fn BorderImage(arg1: *const Image, arg2: *const RectangleInfo,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn FrameImage(arg1: *const Image, arg2: *const FrameInfo,
                      arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn RaiseImage(arg1: *mut Image, arg2: *const RectangleInfo,
                      arg3: ::libc::c_int) -> ::libc::c_uint;
    pub fn GetDelegateCommand(image_info: *const ImageInfo, image: *mut Image,
                              decode: *const ::libc::c_char,
                              encode: *const ::libc::c_char,
                              exception: *mut ExceptionInfo)
     -> *mut ::libc::c_char;
    pub fn GetDelegateInfo(decode: *const ::libc::c_char,
                           encode: *const ::libc::c_char,
                           exception: *mut ExceptionInfo)
     -> *const DelegateInfo;
    pub fn GetPostscriptDelegateInfo(image_info: *const ImageInfo,
                                     antialias: *mut ::libc::c_uint,
                                     exception: *mut ExceptionInfo)
     -> *const DelegateInfo;
    pub fn SetDelegateInfo(arg1: *mut DelegateInfo) -> *mut DelegateInfo;
    pub fn InvokePostscriptDelegate(verbose: ::libc::c_uint,
                                    command: *const ::libc::c_char,
                                    exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn InvokeDelegate(image_info: *mut ImageInfo, image: *mut Image,
                          decode: *const ::libc::c_char,
                          encode: *const ::libc::c_char,
                          exception: *mut ExceptionInfo) -> ::libc::c_uint;
    pub fn ListDelegateInfo(file: *mut FILE, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn PopImagePixels(arg1: *const Image, arg2: QuantumType,
                          arg3: *mut ::libc::c_uchar) -> ::libc::c_uint;
    pub fn PushImagePixels(arg1: *mut Image, arg2: QuantumType,
                           arg3: *const ::libc::c_uchar) -> ::libc::c_uint;
    pub fn AcquireMemory(arg1: size_t) -> *mut ::libc::c_void;
    pub fn CloneMemory(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                       arg3: size_t) -> *mut ::libc::c_void;
    pub fn LiberateMemory(arg1: *mut *mut ::libc::c_void) -> ();
    pub fn ReacquireMemory(arg1: *mut *mut ::libc::c_void, arg2: size_t)
     -> ();
    pub fn AcquireCacheView(view: *const ViewInfo, x: ::libc::c_long,
                            y: ::libc::c_long, columns: ::libc::c_ulong,
                            rows: ::libc::c_ulong,
                            exception: *mut ExceptionInfo)
     -> *const PixelPacket;
    pub fn GetCacheView(view: *mut ViewInfo, x: ::libc::c_long,
                        y: ::libc::c_long, columns: ::libc::c_ulong,
                        rows: ::libc::c_ulong) -> *mut PixelPacket;
    pub fn SetCacheView(view: *mut ViewInfo, x: ::libc::c_long,
                        y: ::libc::c_long, columns: ::libc::c_ulong,
                        rows: ::libc::c_ulong) -> *mut PixelPacket;
    pub fn SyncCacheView(view: *mut ViewInfo) -> ::libc::c_uint;
    pub fn DescribeImage(image: *mut Image, file: *mut FILE,
                         verbose: ::libc::c_uint) -> ::libc::c_uint;
    pub fn GetTypeList(arg1: *const ::libc::c_char,
                       arg2: *mut ::libc::c_ulong)
     -> *mut *mut ::libc::c_char;
    pub fn ListTypeInfo(arg1: *mut FILE, arg2: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn GetTypeInfo(arg1: *const ::libc::c_char, arg2: *mut ExceptionInfo)
     -> *const TypeInfo;
    pub fn GetTypeInfoByFamily(arg1: *const ::libc::c_char, arg2: StyleType,
                               arg3: StretchType, arg4: ::libc::c_ulong,
                               arg5: *mut ExceptionInfo) -> *const TypeInfo;
    pub fn CloneDrawInfo(arg1: *const ImageInfo, arg2: *const DrawInfo)
     -> *mut DrawInfo;
    pub fn AnnotateImage(arg1: *mut Image, arg2: *const DrawInfo)
     -> ::libc::c_uint;
    pub fn DrawAffineImage(arg1: *mut Image, arg2: *const Image,
                           arg3: *const AffineMatrix) -> ::libc::c_uint;
    pub fn DrawClipPath(arg1: *mut Image, arg2: *const DrawInfo,
                        arg3: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn DrawImage(arg1: *mut Image, arg2: *const DrawInfo)
     -> ::libc::c_uint;
    pub fn DrawPatternPath(arg1: *mut Image, arg2: *const DrawInfo,
                           arg3: *const ::libc::c_char, arg4: *mut *mut Image)
     -> ::libc::c_uint;
    pub fn GetTypeMetrics(arg1: *mut Image, arg2: *const DrawInfo,
                          arg3: *mut TypeMetric) -> ::libc::c_uint;
    pub fn DestroyDrawInfo(arg1: *mut DrawInfo) -> ();
    pub fn GetDrawInfo(arg1: *const ImageInfo, arg2: *mut DrawInfo) -> ();
    pub fn DrawGetClipUnits(context: DrawContext) -> ClipPathUnits;
    pub fn DrawPeekGraphicContext(context: DrawContext) -> *mut DrawInfo;
    pub fn DrawGetTextDecoration(context: DrawContext) -> DecorationType;
    pub fn DrawAllocateContext(draw_info: *const DrawInfo, image: *mut Image)
     -> DrawContext;
    pub fn DrawGetClipRule(context: DrawContext) -> FillRule;
    pub fn DrawGetFillRule(context: DrawContext) -> FillRule;
    pub fn DrawGetGravity(context: DrawContext) -> GravityType;
    pub fn DrawGetStrokeLineCap(context: DrawContext) -> LineCap;
    pub fn DrawGetStrokeLineJoin(context: DrawContext) -> LineJoin;
    pub fn DrawGetFillColor(context: DrawContext) -> PixelPacket;
    pub fn DrawGetStrokeColor(context: DrawContext) -> PixelPacket;
    pub fn DrawGetTextUnderColor(context: DrawContext) -> PixelPacket;
    pub fn DrawGetFontStretch(context: DrawContext) -> StretchType;
    pub fn DrawGetFontStyle(context: DrawContext) -> StyleType;
    pub fn DrawGetClipPath(context: DrawContext) -> *mut ::libc::c_char;
    pub fn DrawGetFont(context: DrawContext) -> *mut ::libc::c_char;
    pub fn DrawGetFontFamily(context: DrawContext) -> *mut ::libc::c_char;
    pub fn DrawGetTextEncoding(context: DrawContext) -> *mut ::libc::c_char;
    pub fn DrawRender(context: DrawContext) -> ::libc::c_int;
    pub fn DrawGetStrokeAntialias(context: DrawContext) -> ::libc::c_uint;
    pub fn DrawGetTextAntialias(context: DrawContext) -> ::libc::c_uint;
    pub fn DrawGetFontWeight(context: DrawContext) -> ::libc::c_ulong;
    pub fn DrawGetStrokeMiterLimit(context: DrawContext) -> ::libc::c_ulong;
    pub fn DrawGetFillOpacity(context: DrawContext) -> ::libc::c_double;
    pub fn DrawGetFontSize(context: DrawContext) -> ::libc::c_double;
    pub fn DrawGetStrokeDashArray(context: DrawContext,
                                  num_elems: *mut ::libc::c_ulong)
     -> *mut ::libc::c_double;
    pub fn DrawGetStrokeDashOffset(context: DrawContext) -> ::libc::c_double;
    pub fn DrawGetStrokeOpacity(context: DrawContext) -> ::libc::c_double;
    pub fn DrawGetStrokeWidth(context: DrawContext) -> ::libc::c_double;
    pub fn DrawAffine(context: DrawContext, affine: *const AffineMatrix)
     -> ();
    pub fn DrawAnnotation(context: DrawContext, x: ::libc::c_double,
                          y: ::libc::c_double, text: *const ::libc::c_uchar)
     -> ();
    pub fn DrawArc(context: DrawContext, sx: ::libc::c_double,
                   sy: ::libc::c_double, ex: ::libc::c_double,
                   ey: ::libc::c_double, sd: ::libc::c_double,
                   ed: ::libc::c_double) -> ();
    pub fn DrawBezier(context: DrawContext, num_coords: ::libc::c_ulong,
                      coordinates: *const PointInfo) -> ();
    pub fn DrawCircle(context: DrawContext, ox: ::libc::c_double,
                      oy: ::libc::c_double, px: ::libc::c_double,
                      py: ::libc::c_double) -> ();
    pub fn DrawColor(context: DrawContext, x: ::libc::c_double,
                     y: ::libc::c_double, paintMethod: PaintMethod) -> ();
    pub fn DrawComment(context: DrawContext, comment: *const ::libc::c_char)
     -> ();
    pub fn DrawDestroyContext(context: DrawContext) -> ();
    pub fn DrawEllipse(context: DrawContext, ox: ::libc::c_double,
                       oy: ::libc::c_double, rx: ::libc::c_double,
                       ry: ::libc::c_double, start: ::libc::c_double,
                       end: ::libc::c_double) -> ();
    pub fn DrawComposite(context: DrawContext,
                         composite_operator: CompositeOperator,
                         x: ::libc::c_double, y: ::libc::c_double,
                         width: ::libc::c_double, height: ::libc::c_double,
                         image: *const Image) -> ();
    pub fn DrawLine(context: DrawContext, sx: ::libc::c_double,
                    sy: ::libc::c_double, ex: ::libc::c_double,
                    ey: ::libc::c_double) -> ();
    pub fn DrawMatte(context: DrawContext, x: ::libc::c_double,
                     y: ::libc::c_double, paint_method: PaintMethod) -> ();
    pub fn DrawPathClose(context: DrawContext) -> ();
    pub fn DrawPathCurveToAbsolute(context: DrawContext, x1: ::libc::c_double,
                                   y1: ::libc::c_double, x2: ::libc::c_double,
                                   y2: ::libc::c_double, x: ::libc::c_double,
                                   y: ::libc::c_double) -> ();
    pub fn DrawPathCurveToRelative(context: DrawContext, x1: ::libc::c_double,
                                   y1: ::libc::c_double, x2: ::libc::c_double,
                                   y2: ::libc::c_double, x: ::libc::c_double,
                                   y: ::libc::c_double) -> ();
    pub fn DrawPathCurveToQuadraticBezierAbsolute(context: DrawContext,
                                                  x1: ::libc::c_double,
                                                  y1: ::libc::c_double,
                                                  x: ::libc::c_double,
                                                  y: ::libc::c_double) -> ();
    pub fn DrawPathCurveToQuadraticBezierRelative(context: DrawContext,
                                                  x1: ::libc::c_double,
                                                  y1: ::libc::c_double,
                                                  x: ::libc::c_double,
                                                  y: ::libc::c_double) -> ();
    pub fn DrawPathCurveToQuadraticBezierSmoothAbsolute(context: DrawContext,
                                                        x: ::libc::c_double,
                                                        y: ::libc::c_double)
     -> ();
    pub fn DrawPathCurveToQuadraticBezierSmoothRelative(context: DrawContext,
                                                        x: ::libc::c_double,
                                                        y: ::libc::c_double)
     -> ();
    pub fn DrawPathCurveToSmoothAbsolute(context: DrawContext,
                                         x2: ::libc::c_double,
                                         y2: ::libc::c_double,
                                         x: ::libc::c_double,
                                         y: ::libc::c_double) -> ();
    pub fn DrawPathCurveToSmoothRelative(context: DrawContext,
                                         x2: ::libc::c_double,
                                         y2: ::libc::c_double,
                                         x: ::libc::c_double,
                                         y: ::libc::c_double) -> ();
    pub fn DrawPathEllipticArcAbsolute(context: DrawContext,
                                       rx: ::libc::c_double,
                                       ry: ::libc::c_double,
                                       x_axis_rotation: ::libc::c_double,
                                       large_arc_flag: ::libc::c_uint,
                                       sweep_flag: ::libc::c_uint,
                                       x: ::libc::c_double,
                                       y: ::libc::c_double) -> ();
    pub fn DrawPathEllipticArcRelative(context: DrawContext,
                                       rx: ::libc::c_double,
                                       ry: ::libc::c_double,
                                       x_axis_rotation: ::libc::c_double,
                                       large_arc_flag: ::libc::c_uint,
                                       sweep_flag: ::libc::c_uint,
                                       x: ::libc::c_double,
                                       y: ::libc::c_double) -> ();
    pub fn DrawPathFinish(context: DrawContext) -> ();
    pub fn DrawPathLineToAbsolute(context: DrawContext, x: ::libc::c_double,
                                  y: ::libc::c_double) -> ();
    pub fn DrawPathLineToRelative(context: DrawContext, x: ::libc::c_double,
                                  y: ::libc::c_double) -> ();
    pub fn DrawPathLineToHorizontalAbsolute(context: DrawContext,
                                            x: ::libc::c_double) -> ();
    pub fn DrawPathLineToHorizontalRelative(context: DrawContext,
                                            x: ::libc::c_double) -> ();
    pub fn DrawPathLineToVerticalAbsolute(context: DrawContext,
                                          y: ::libc::c_double) -> ();
    pub fn DrawPathLineToVerticalRelative(context: DrawContext,
                                          y: ::libc::c_double) -> ();
    pub fn DrawPathMoveToAbsolute(context: DrawContext, x: ::libc::c_double,
                                  y: ::libc::c_double) -> ();
    pub fn DrawPathMoveToRelative(context: DrawContext, x: ::libc::c_double,
                                  y: ::libc::c_double) -> ();
    pub fn DrawPathStart(context: DrawContext) -> ();
    pub fn DrawPoint(context: DrawContext, x: ::libc::c_double,
                     y: ::libc::c_double) -> ();
    pub fn DrawPolygon(context: DrawContext, num_coords: ::libc::c_ulong,
                       coordinates: *const PointInfo) -> ();
    pub fn DrawPolyline(context: DrawContext, num_coords: ::libc::c_ulong,
                        coordinates: *const PointInfo) -> ();
    pub fn DrawPopClipPath(context: DrawContext) -> ();
    pub fn DrawPopDefs(context: DrawContext) -> ();
    pub fn DrawPopGraphicContext(context: DrawContext) -> ();
    pub fn DrawPopPattern(context: DrawContext) -> ();
    pub fn DrawPushClipPath(context: DrawContext,
                            clip_path_id: *const ::libc::c_char) -> ();
    pub fn DrawPushDefs(context: DrawContext) -> ();
    pub fn DrawPushGraphicContext(context: DrawContext) -> ();
    pub fn DrawPushPattern(context: DrawContext,
                           pattern_id: *const ::libc::c_char,
                           x: ::libc::c_double, y: ::libc::c_double,
                           width: ::libc::c_double, height: ::libc::c_double)
     -> ();
    pub fn DrawRectangle(context: DrawContext, x1: ::libc::c_double,
                         y1: ::libc::c_double, x2: ::libc::c_double,
                         y2: ::libc::c_double) -> ();
    pub fn DrawRoundRectangle(context: DrawContext, x1: ::libc::c_double,
                              y1: ::libc::c_double, x2: ::libc::c_double,
                              y2: ::libc::c_double, rx: ::libc::c_double,
                              ry: ::libc::c_double) -> ();
    pub fn DrawScale(context: DrawContext, x: ::libc::c_double,
                     y: ::libc::c_double) -> ();
    pub fn DrawSetClipPath(context: DrawContext,
                           clip_path: *const ::libc::c_char) -> ();
    pub fn DrawSetClipRule(context: DrawContext, fill_rule: FillRule) -> ();
    pub fn DrawSetClipUnits(context: DrawContext, clip_units: ClipPathUnits)
     -> ();
    pub fn DrawSetFillColor(context: DrawContext,
                            fill_color: *const PixelPacket) -> ();
    pub fn DrawSetFillColorString(context: DrawContext,
                                  fill_color: *const ::libc::c_char) -> ();
    pub fn DrawSetFillOpacity(context: DrawContext,
                              fill_opacity: ::libc::c_double) -> ();
    pub fn DrawSetFillRule(context: DrawContext, fill_rule: FillRule) -> ();
    pub fn DrawSetFillPatternURL(context: DrawContext,
                                 fill_url: *const ::libc::c_char) -> ();
    pub fn DrawSetFont(context: DrawContext, font_name: *const ::libc::c_char)
     -> ();
    pub fn DrawSetFontFamily(context: DrawContext,
                             font_family: *const ::libc::c_char) -> ();
    pub fn DrawSetFontSize(context: DrawContext,
                           font_pointsize: ::libc::c_double) -> ();
    pub fn DrawSetFontStretch(context: DrawContext, font_stretch: StretchType)
     -> ();
    pub fn DrawSetFontStyle(context: DrawContext, font_style: StyleType)
     -> ();
    pub fn DrawSetFontWeight(context: DrawContext,
                             font_weight: ::libc::c_ulong) -> ();
    pub fn DrawSetGravity(context: DrawContext, gravity: GravityType) -> ();
    pub fn DrawRotate(context: DrawContext, degrees: ::libc::c_double) -> ();
    pub fn DrawSkewX(context: DrawContext, degrees: ::libc::c_double) -> ();
    pub fn DrawSkewY(context: DrawContext, degrees: ::libc::c_double) -> ();
    pub fn DrawSetStrokeAntialias(context: DrawContext,
                                  true_false: ::libc::c_uint) -> ();
    pub fn DrawSetStrokeColor(context: DrawContext,
                              stroke_color: *const PixelPacket) -> ();
    pub fn DrawSetStrokeColorString(context: DrawContext,
                                    stroke_color: *const ::libc::c_char)
     -> ();
    pub fn DrawSetStrokeDashArray(context: DrawContext,
                                  num_elems: ::libc::c_ulong,
                                  dasharray: *const ::libc::c_double) -> ();
    pub fn DrawSetStrokeDashOffset(context: DrawContext,
                                   dashoffset: ::libc::c_double) -> ();
    pub fn DrawSetStrokeLineCap(context: DrawContext, linecap: LineCap) -> ();
    pub fn DrawSetStrokeLineJoin(context: DrawContext, linejoin: LineJoin)
     -> ();
    pub fn DrawSetStrokeMiterLimit(context: DrawContext,
                                   miterlimit: ::libc::c_ulong) -> ();
    pub fn DrawSetStrokeOpacity(context: DrawContext,
                                opacity: ::libc::c_double) -> ();
    pub fn DrawSetStrokePatternURL(context: DrawContext,
                                   stroke_url: *const ::libc::c_char) -> ();
    pub fn DrawSetStrokeWidth(context: DrawContext, width: ::libc::c_double)
     -> ();
    pub fn DrawSetTextAntialias(context: DrawContext,
                                true_false: ::libc::c_uint) -> ();
    pub fn DrawSetTextDecoration(context: DrawContext,
                                 decoration: DecorationType) -> ();
    pub fn DrawSetTextEncoding(context: DrawContext,
                               encoding: *const ::libc::c_char) -> ();
    pub fn DrawSetTextUnderColor(context: DrawContext,
                                 color: *const PixelPacket) -> ();
    pub fn DrawSetTextUnderColorString(context: DrawContext,
                                       under_color: *const ::libc::c_char)
     -> ();
    pub fn DrawSetViewbox(context: DrawContext, x1: ::libc::c_ulong,
                          y1: ::libc::c_ulong, x2: ::libc::c_ulong,
                          y2: ::libc::c_ulong) -> ();
    pub fn DrawTranslate(context: DrawContext, x: ::libc::c_double,
                         y: ::libc::c_double) -> ();
    pub fn AdaptiveThresholdImage(arg1: *const Image, arg2: ::libc::c_ulong,
                                  arg3: ::libc::c_ulong,
                                  arg4: ::libc::c_double,
                                  arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn AddNoiseImage(arg1: *const Image, arg2: NoiseType,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn AddNoiseImageChannel(image: *const Image, channel: ChannelType,
                                noise_type: NoiseType,
                                exception: *mut ExceptionInfo) -> *mut Image;
    pub fn BlurImage(arg1: *const Image, arg2: ::libc::c_double,
                     arg3: ::libc::c_double, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn BlurImageChannel(image: *const Image, channel: ChannelType,
                            radius: ::libc::c_double, sigma: ::libc::c_double,
                            exception: *mut ExceptionInfo) -> *mut Image;
    pub fn ConvolveImage(arg1: *const Image, arg2: ::libc::c_uint,
                         arg3: *const ::libc::c_double,
                         arg4: *mut ExceptionInfo) -> *mut Image;
    pub fn DespeckleImage(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> *mut Image;
    pub fn EdgeImage(arg1: *const Image, arg2: ::libc::c_double,
                     arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn EmbossImage(arg1: *const Image, arg2: ::libc::c_double,
                       arg3: ::libc::c_double, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn EnhanceImage(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> *mut Image;
    pub fn GaussianBlurImage(arg1: *const Image, arg2: ::libc::c_double,
                             arg3: ::libc::c_double, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn GaussianBlurImageChannel(image: *const Image, channel: ChannelType,
                                    radius: ::libc::c_double,
                                    sigma: ::libc::c_double,
                                    exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn MedianFilterImage(arg1: *const Image, arg2: ::libc::c_double,
                             arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn MotionBlurImage(arg1: *const Image, arg2: ::libc::c_double,
                           arg3: ::libc::c_double, arg4: ::libc::c_double,
                           arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn ReduceNoiseImage(arg1: *const Image, arg2: ::libc::c_double,
                            arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ShadeImage(arg1: *const Image, arg2: ::libc::c_uint,
                      arg3: ::libc::c_double, arg4: ::libc::c_double,
                      arg5: *mut ExceptionInfo) -> *mut Image;
    pub fn SharpenImage(arg1: *const Image, arg2: ::libc::c_double,
                        arg3: ::libc::c_double, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn SharpenImageChannel(image: *const Image, channel: ChannelType,
                               radius: ::libc::c_double,
                               sigma: ::libc::c_double,
                               exception: *mut ExceptionInfo) -> *mut Image;
    pub fn SpreadImage(arg1: *const Image, arg2: ::libc::c_uint,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn UnsharpMaskImage(arg1: *const Image, arg2: ::libc::c_double,
                            arg3: ::libc::c_double, arg4: ::libc::c_double,
                            arg5: ::libc::c_double, arg6: *mut ExceptionInfo)
     -> *mut Image;
    pub fn UnsharpMaskImageChannel(image: *const Image, channel: ChannelType,
                                   radius: ::libc::c_double,
                                   sigma: ::libc::c_double,
                                   amount: ::libc::c_double,
                                   threshold: ::libc::c_double,
                                   exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn BlackThresholdImage(image: *mut Image,
                               thresholds: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn ChannelThresholdImage(arg1: *mut Image,
                                 arg2: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn RandomChannelThresholdImage(arg1: *mut Image,
                                       arg2: *const ::libc::c_char,
                                       arg3: *const ::libc::c_char,
                                       exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn ThresholdImage(arg1: *mut Image, arg2: ::libc::c_double)
     -> ::libc::c_uint;
    pub fn WhiteThresholdImage(image: *mut Image,
                               thresholds: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn ContrastImage(arg1: *mut Image, arg2: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn EqualizeImage(arg1: *mut Image) -> ::libc::c_uint;
    pub fn GammaImage(arg1: *mut Image, arg2: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn LevelImage(arg1: *mut Image, arg2: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn LevelImageChannel(arg1: *mut Image, arg2: ChannelType,
                             arg3: ::libc::c_double, arg4: ::libc::c_double,
                             arg5: ::libc::c_double) -> ::libc::c_uint;
    pub fn ModulateImage(arg1: *mut Image, arg2: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn NegateImage(arg1: *mut Image, arg2: ::libc::c_uint)
     -> ::libc::c_uint;
    pub fn NormalizeImage(arg1: *mut Image) -> ::libc::c_uint;
    pub fn CharcoalImage(arg1: *const Image, arg2: ::libc::c_double,
                         arg3: ::libc::c_double, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ColorizeImage(arg1: *const Image, arg2: *const ::libc::c_char,
                         arg3: PixelPacket, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ImplodeImage(arg1: *const Image, arg2: ::libc::c_double,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn MorphImages(arg1: *const Image, arg2: ::libc::c_ulong,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn OilPaintImage(arg1: *const Image, arg2: ::libc::c_double,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn SteganoImage(arg1: *const Image, arg2: *const Image,
                        arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn StereoImage(arg1: *const Image, arg2: *const Image,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn SwirlImage(arg1: *const Image, arg2: ::libc::c_double,
                      arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn WaveImage(arg1: *const Image, arg2: ::libc::c_double,
                     arg3: ::libc::c_double, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ColorMatrixImage(image: *mut Image, order: ::libc::c_uint,
                            matrix: *const ::libc::c_double)
     -> ::libc::c_uint;
    pub fn SolarizeImage(arg1: *mut Image, arg2: ::libc::c_double)
     -> ::libc::c_uint;
    pub fn MagickRandomInteger() -> magick_uint32_t;
    pub fn MagickRandomReal() -> ::libc::c_double;
    pub fn ExpandAffine(arg1: *const AffineMatrix) -> ::libc::c_double;
    pub fn GenerateDifferentialNoise(pixel: Quantum, noise_type: NoiseType,
                                     kernel: *mut MagickRandomKernel)
     -> ::libc::c_double;
    pub fn GetOptimalKernelWidth(arg1: ::libc::c_double,
                                 arg2: ::libc::c_double) -> ::libc::c_int;
    pub fn GetOptimalKernelWidth1D(arg1: ::libc::c_double,
                                   arg2: ::libc::c_double) -> ::libc::c_int;
    pub fn GetOptimalKernelWidth2D(arg1: ::libc::c_double,
                                   arg2: ::libc::c_double) -> ::libc::c_int;
    pub fn GenerateNoise(arg1: Quantum, arg2: NoiseType) -> Quantum;
    pub fn Contrast(arg1: ::libc::c_int, arg2: *mut Quantum,
                    arg3: *mut Quantum, arg4: *mut Quantum) -> ();
    pub fn HSLTransform(arg1: ::libc::c_double, arg2: ::libc::c_double,
                        arg3: ::libc::c_double, arg4: *mut Quantum,
                        arg5: *mut Quantum, arg6: *mut Quantum) -> ();
    pub fn HWBTransform(arg1: ::libc::c_double, arg2: ::libc::c_double,
                        arg3: ::libc::c_double, arg4: *mut Quantum,
                        arg5: *mut Quantum, arg6: *mut Quantum) -> ();
    pub fn Hull(arg1: ::libc::c_long, arg2: ::libc::c_long,
                arg3: ::libc::c_ulong, arg4: ::libc::c_ulong,
                arg5: *mut Quantum, arg6: *mut Quantum, arg7: ::libc::c_int)
     -> ();
    pub fn IdentityAffine(arg1: *mut AffineMatrix) -> ();
    pub fn Modulate(arg1: ::libc::c_double, arg2: ::libc::c_double,
                    arg3: ::libc::c_double, arg4: *mut Quantum,
                    arg5: *mut Quantum, arg6: *mut Quantum) -> ();
    pub fn TransformHSL(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                        arg4: *mut ::libc::c_double,
                        arg5: *mut ::libc::c_double,
                        arg6: *mut ::libc::c_double) -> ();
    pub fn TransformHWB(arg1: Quantum, arg2: Quantum, arg3: Quantum,
                        arg4: *mut ::libc::c_double,
                        arg5: *mut ::libc::c_double,
                        arg6: *mut ::libc::c_double) -> ();
    pub fn GradientImage(arg1: *mut Image, arg2: *const PixelPacket,
                         arg3: *const PixelPacket) -> ::libc::c_uint;
    pub fn HaldClutImage(arg1: *mut Image, clut: *const Image)
     -> ::libc::c_uint;
    pub fn CloneImageList(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> *mut Image;
    pub fn GetFirstImageInList(arg1: *const Image) -> *mut Image;
    pub fn GetImageFromList(arg1: *const Image, arg2: ::libc::c_long)
     -> *mut Image;
    pub fn GetLastImageInList(arg1: *const Image) -> *mut Image;
    pub fn GetNextImageInList(arg1: *const Image) -> *mut Image;
    pub fn GetPreviousImageInList(arg1: *const Image) -> *mut Image;
    pub fn ImageListToArray(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> *mut *mut Image;
    pub fn NewImageList() -> *mut Image;
    pub fn RemoveLastImageFromList(arg1: *mut *mut Image) -> *mut Image;
    pub fn RemoveFirstImageFromList(arg1: *mut *mut Image) -> *mut Image;
    pub fn SplitImageList(arg1: *mut Image) -> *mut Image;
    pub fn SyncNextImageInList(arg1: *const Image) -> *mut Image;
    pub fn GetImageIndexInList(arg1: *const Image) -> ::libc::c_long;
    pub fn GetImageListLength(arg1: *const Image) -> ::libc::c_ulong;
    pub fn AppendImageToList(arg1: *mut *mut Image, arg2: *mut Image) -> ();
    pub fn DeleteImageFromList(arg1: *mut *mut Image) -> ();
    pub fn DestroyImageList(arg1: *mut Image) -> ();
    pub fn InsertImageInList(arg1: *mut *mut Image, arg2: *mut Image) -> ();
    pub fn PrependImageToList(arg1: *mut *mut Image, arg2: *mut Image) -> ();
    pub fn ReplaceImageInList(images: *mut *mut Image, image: *mut Image)
     -> ();
    pub fn ReverseImageList(arg1: *mut *mut Image) -> ();
    pub fn SpliceImageIntoList(arg1: *mut *mut Image, arg2: ::libc::c_ulong,
                               arg3: *mut Image) -> ();
    pub fn GetMagickFileFormat(header: *const ::libc::c_uchar,
                               header_length: size_t,
                               format: *mut ::libc::c_char,
                               format_length: size_t,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn ListMagicInfo(file: *mut FILE, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn MagickToMime(magick: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn GetImageMagick(magick: *const ::libc::c_uchar, length: size_t)
     -> *const ::libc::c_char;
    pub fn IsMagickConflict(magick: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn ListModuleMap(file: *mut FILE, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn ListMagickInfo(file: *mut FILE, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn UnregisterMagickInfo(name: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn DestroyMagick() -> ();
    pub fn InitializeMagick(path: *const ::libc::c_char) -> ();
    pub fn PanicDestroyMagick() -> ();
    pub fn GetMagickInfo(name: *const ::libc::c_char,
                         exception: *mut ExceptionInfo) -> *const MagickInfo;
    pub fn GetMagickInfoArray(exception: *mut ExceptionInfo)
     -> *mut *mut MagickInfo;
    pub fn RegisterMagickInfo(magick_info: *mut MagickInfo)
     -> *mut MagickInfo;
    pub fn SetMagickInfo(name: *const ::libc::c_char) -> *mut MagickInfo;
    pub fn MagickAllocFunctions(free_func: MagickFreeFunc,
                                malloc_func: MagickMallocFunc,
                                realloc_func: MagickReallocFunc) -> ();
    pub fn MagickMalloc(size: size_t) -> *mut ::libc::c_void;
    pub fn MagickMallocAligned(alignment: size_t, size: size_t)
     -> *mut ::libc::c_void;
    pub fn MagickMallocCleared(size: size_t) -> *mut ::libc::c_void;
    pub fn MagickCloneMemory(destination: *mut ::libc::c_void,
                             source: *const ::libc::c_void, size: size_t)
     -> *mut ::libc::c_void;
    pub fn MagickRealloc(memory: *mut ::libc::c_void, size: size_t)
     -> *mut ::libc::c_void;
    pub fn MagickFree(memory: *mut ::libc::c_void) -> ();
    pub fn MagickFreeAligned(memory: *mut ::libc::c_void) -> ();
    pub fn ListModuleInfo(file: *mut FILE, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn SetMonitorHandler(handler: MonitorHandler) -> MonitorHandler;
    pub fn MagickMonitor(text: *const ::libc::c_char, quantum: magick_int64_t,
                         span: magick_uint64_t, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn MagickMonitorFormatted(quantum: magick_int64_t,
                                  span: magick_uint64_t,
                                  exception: *mut ExceptionInfo,
                                  format: *const ::libc::c_char, ...)
     -> ::libc::c_uint;
    pub fn MontageImages(arg1: *const Image, arg2: *const MontageInfo,
                         arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn CloneMontageInfo(arg1: *const ImageInfo, arg2: *const MontageInfo)
     -> *mut MontageInfo;
    pub fn DestroyMontageInfo(arg1: *mut MontageInfo) -> ();
    pub fn GetMontageInfo(arg1: *const ImageInfo, arg2: *mut MontageInfo)
     -> ();
    pub fn QuantumOperatorImage(image: *mut Image, channel: ChannelType,
                                quantum_operator: QuantumOperator,
                                rvalue: ::libc::c_double,
                                exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn QuantumOperatorImageMultivalue(image: *mut Image,
                                          quantum_operator: QuantumOperator,
                                          values: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn QuantumOperatorRegionImage(image: *mut Image, x: ::libc::c_long,
                                      y: ::libc::c_long,
                                      columns: ::libc::c_ulong,
                                      rows: ::libc::c_ulong,
                                      channel: ChannelType,
                                      quantum_operator: QuantumOperator,
                                      rvalue: ::libc::c_double,
                                      exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn ColorFloodfillImage(arg1: *mut Image, arg2: *const DrawInfo,
                               arg3: PixelPacket, arg4: ::libc::c_long,
                               arg5: ::libc::c_long, arg6: PaintMethod)
     -> ::libc::c_uint;
    pub fn MatteFloodfillImage(arg1: *mut Image, arg2: PixelPacket,
                               arg3: ::libc::c_uint, arg4: ::libc::c_long,
                               arg5: ::libc::c_long, arg6: PaintMethod)
     -> ::libc::c_uint;
    pub fn OpaqueImage(arg1: *mut Image, arg2: PixelPacket, arg3: PixelPacket)
     -> ::libc::c_uint;
    pub fn TransparentImage(arg1: *mut Image, arg2: PixelPacket,
                            arg3: ::libc::c_uint) -> ::libc::c_uint;
    pub fn AcquireImagePixels(image: *const Image, x: ::libc::c_long,
                              y: ::libc::c_long, columns: ::libc::c_ulong,
                              rows: ::libc::c_ulong,
                              exception: *mut ExceptionInfo)
     -> *const PixelPacket;
    pub fn AccessImmutableIndexes(image: *const Image) -> *const IndexPacket;
    pub fn AcquireOnePixel(image: *const Image, x: ::libc::c_long,
                           y: ::libc::c_long, exception: *mut ExceptionInfo)
     -> PixelPacket;
    pub fn GetImagePixels(image: *mut Image, x: ::libc::c_long,
                          y: ::libc::c_long, columns: ::libc::c_ulong,
                          rows: ::libc::c_ulong) -> *mut PixelPacket;
    pub fn GetImagePixelsEx(image: *mut Image, x: ::libc::c_long,
                            y: ::libc::c_long, columns: ::libc::c_ulong,
                            rows: ::libc::c_ulong,
                            exception: *mut ExceptionInfo)
     -> *mut PixelPacket;
    pub fn GetImageVirtualPixelMethod(image: *const Image)
     -> VirtualPixelMethod;
    pub fn GetPixels(image: *const Image) -> *mut PixelPacket;
    pub fn AccessMutablePixels(image: *mut Image) -> *mut PixelPacket;
    pub fn GetIndexes(image: *const Image) -> *mut IndexPacket;
    pub fn AccessMutableIndexes(image: *mut Image) -> *mut IndexPacket;
    pub fn GetOnePixel(image: *mut Image, x: ::libc::c_long,
                       y: ::libc::c_long) -> PixelPacket;
    pub fn GetPixelCacheArea(image: *const Image) -> magick_off_t;
    pub fn SetImagePixels(image: *mut Image, x: ::libc::c_long,
                          y: ::libc::c_long, columns: ::libc::c_ulong,
                          rows: ::libc::c_ulong) -> *mut PixelPacket;
    pub fn SetImagePixelsEx(image: *mut Image, x: ::libc::c_long,
                            y: ::libc::c_long, columns: ::libc::c_ulong,
                            rows: ::libc::c_ulong,
                            exception: *mut ExceptionInfo)
     -> *mut PixelPacket;
    pub fn SetImageVirtualPixelMethod(image: *const Image,
                                      method: VirtualPixelMethod)
     -> ::libc::c_uint;
    pub fn SyncImagePixels(image: *mut Image) -> ::libc::c_uint;
    pub fn SyncImagePixelsEx(image: *mut Image, exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn OpenCacheView(image: *mut Image) -> *mut ViewInfo;
    pub fn CloseCacheView(view: *mut ViewInfo) -> ();
    pub fn AccessCacheViewPixels(view: *const ViewInfo) -> *mut PixelPacket;
    pub fn AcquireCacheViewIndexes(view: *const ViewInfo)
     -> *const IndexPacket;
    pub fn AcquireCacheViewPixels(view: *const ViewInfo, x: ::libc::c_long,
                                  y: ::libc::c_long, columns: ::libc::c_ulong,
                                  rows: ::libc::c_ulong,
                                  exception: *mut ExceptionInfo)
     -> *const PixelPacket;
    pub fn AcquireOneCacheViewPixel(view: *const ViewInfo,
                                    pixel: *mut PixelPacket,
                                    x: ::libc::c_long, y: ::libc::c_long,
                                    exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn GetCacheViewArea(view: *const ViewInfo) -> magick_off_t;
    pub fn GetCacheViewImage(view: *const ViewInfo) -> *mut Image;
    pub fn GetCacheViewIndexes(view: *const ViewInfo) -> *mut IndexPacket;
    pub fn GetCacheViewPixels(view: *const ViewInfo, x: ::libc::c_long,
                              y: ::libc::c_long, columns: ::libc::c_ulong,
                              rows: ::libc::c_ulong,
                              exception: *mut ExceptionInfo)
     -> *mut PixelPacket;
    pub fn GetCacheViewRegion(view: *const ViewInfo) -> RectangleInfo;
    pub fn SetCacheViewPixels(view: *const ViewInfo, x: ::libc::c_long,
                              y: ::libc::c_long, columns: ::libc::c_ulong,
                              rows: ::libc::c_ulong,
                              exception: *mut ExceptionInfo)
     -> *mut PixelPacket;
    pub fn SyncCacheViewPixels(view: *const ViewInfo,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn InitializePixelIteratorOptions(options: *mut PixelIteratorOptions,
                                          exception: *mut ExceptionInfo)
     -> ();
    pub fn PixelIterateMonoRead(call_back: PixelIteratorMonoReadCallback,
                                options: *const PixelIteratorOptions,
                                description: *const ::libc::c_char,
                                mutable_data: *mut ::libc::c_void,
                                immutable_data: *const ::libc::c_void,
                                x: ::libc::c_long, y: ::libc::c_long,
                                columns: ::libc::c_ulong,
                                rows: ::libc::c_ulong, image: *const Image,
                                exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn PixelIterateMonoModify(call_back: PixelIteratorMonoModifyCallback,
                                  options: *const PixelIteratorOptions,
                                  description: *const ::libc::c_char,
                                  mutable_data: *mut ::libc::c_void,
                                  immutable_data: *const ::libc::c_void,
                                  x: ::libc::c_long, y: ::libc::c_long,
                                  columns: ::libc::c_ulong,
                                  rows: ::libc::c_ulong, image: *mut Image,
                                  exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn PixelIterateDualRead(call_back: PixelIteratorDualReadCallback,
                                options: *const PixelIteratorOptions,
                                description: *const ::libc::c_char,
                                mutable_data: *mut ::libc::c_void,
                                immutable_data: *const ::libc::c_void,
                                columns: ::libc::c_ulong,
                                rows: ::libc::c_ulong,
                                first_image: *const Image,
                                first_x: ::libc::c_long,
                                first_y: ::libc::c_long,
                                second_image: *const Image,
                                second_x: ::libc::c_long,
                                second_y: ::libc::c_long,
                                exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn PixelIterateDualModify(call_back: PixelIteratorDualModifyCallback,
                                  options: *const PixelIteratorOptions,
                                  description: *const ::libc::c_char,
                                  mutable_data: *mut ::libc::c_void,
                                  immutable_data: *const ::libc::c_void,
                                  columns: ::libc::c_ulong,
                                  rows: ::libc::c_ulong,
                                  source_image: *const Image,
                                  source_x: ::libc::c_long,
                                  source_y: ::libc::c_long,
                                  update_image: *mut Image,
                                  update_x: ::libc::c_long,
                                  update_y: ::libc::c_long,
                                  exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn PixelIterateDualNew(call_back: PixelIteratorDualNewCallback,
                               options: *const PixelIteratorOptions,
                               description: *const ::libc::c_char,
                               mutable_data: *mut ::libc::c_void,
                               immutable_data: *const ::libc::c_void,
                               columns: ::libc::c_ulong,
                               rows: ::libc::c_ulong,
                               source_image: *const Image,
                               source_x: ::libc::c_long,
                               source_y: ::libc::c_long,
                               new_image: *mut Image, new_x: ::libc::c_long,
                               new_y: ::libc::c_long,
                               exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn PixelIterateTripleModify(call_back:
                                        PixelIteratorTripleModifyCallback,
                                    options: *const PixelIteratorOptions,
                                    description: *const ::libc::c_char,
                                    mutable_data: *mut ::libc::c_void,
                                    immutable_data: *const ::libc::c_void,
                                    columns: ::libc::c_ulong,
                                    rows: ::libc::c_ulong,
                                    source1_image: *const Image,
                                    source2_image: *const Image,
                                    source_x: ::libc::c_long,
                                    source_y: ::libc::c_long,
                                    update_image: *mut Image,
                                    update_x: ::libc::c_long,
                                    update_y: ::libc::c_long,
                                    exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn PixelIterateTripleNew(call_back: PixelIteratorTripleNewCallback,
                                 options: *const PixelIteratorOptions,
                                 description: *const ::libc::c_char,
                                 mutable_data: *mut ::libc::c_void,
                                 immutable_data: *const ::libc::c_void,
                                 columns: ::libc::c_ulong,
                                 rows: ::libc::c_ulong,
                                 source1_image: *const Image,
                                 source2_image: *const Image,
                                 source_x: ::libc::c_long,
                                 source_y: ::libc::c_long,
                                 new_image: *mut Image, new_x: ::libc::c_long,
                                 new_y: ::libc::c_long,
                                 exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn PlasmaImage(image: *mut Image, segment: *const SegmentInfo,
                       attenuate: ::libc::c_ulong, depth: ::libc::c_ulong)
     -> ::libc::c_uint;
    pub fn GetImageProfile(image: *const Image, name: *const ::libc::c_char,
                           length: *mut size_t) -> *const ::libc::c_uchar;
    pub fn DeleteImageProfile(image: *mut Image, name: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn ProfileImage(image: *mut Image, name: *const ::libc::c_char,
                        profile: *mut ::libc::c_uchar, length: size_t,
                        clone: ::libc::c_uint) -> ::libc::c_uint;
    pub fn SetImageProfile(image: *mut Image, name: *const ::libc::c_char,
                           profile: *const ::libc::c_uchar, length: size_t)
     -> ::libc::c_uint;
    pub fn AppendImageProfile(image: *mut Image, name: *const ::libc::c_char,
                              profile_chunk: *const ::libc::c_uchar,
                              chunk_length: size_t) -> ::libc::c_uint;
    pub fn AllocateImageProfileIterator(image: *const Image)
     -> ImageProfileIterator;
    pub fn NextImageProfile(profile_iterator: ImageProfileIterator,
                            name: *mut *const ::libc::c_char,
                            profile: *mut *const ::libc::c_uchar,
                            length: *mut size_t) -> ::libc::c_uint;
    pub fn DeallocateImageProfileIterator(profile_iterator:
                                              ImageProfileIterator) -> ();
    pub fn CloneQuantizeInfo(arg1: *const QuantizeInfo) -> *mut QuantizeInfo;
    pub fn GetImageQuantizeError(arg1: *mut Image) -> ::libc::c_uint;
    pub fn MapImage(arg1: *mut Image, arg2: *const Image,
                    arg3: ::libc::c_uint) -> ::libc::c_uint;
    pub fn MapImages(arg1: *mut Image, arg2: *const Image,
                     arg3: ::libc::c_uint) -> ::libc::c_uint;
    pub fn OrderedDitherImage(arg1: *mut Image) -> ::libc::c_uint;
    pub fn QuantizeImage(arg1: *const QuantizeInfo, arg2: *mut Image)
     -> ::libc::c_uint;
    pub fn QuantizeImages(arg1: *const QuantizeInfo, arg2: *mut Image)
     -> ::libc::c_uint;
    pub fn SegmentImage(arg1: *mut Image, arg2: ColorspaceType,
                        arg3: ::libc::c_uint, arg4: ::libc::c_double,
                        arg5: ::libc::c_double) -> ::libc::c_uint;
    pub fn CompressImageColormap(arg1: *mut Image) -> ();
    pub fn DestroyQuantizeInfo(arg1: *mut QuantizeInfo) -> ();
    pub fn GetQuantizeInfo(arg1: *mut QuantizeInfo) -> ();
    pub fn GrayscalePseudoClassImage(arg1: *mut Image, arg2: ::libc::c_uint)
     -> ();
    pub fn GetImageFromMagickRegistry(name: *const ::libc::c_char,
                                      id: *mut ::libc::c_long,
                                      exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn SetMagickRegistry(_type: RegistryType, blob: *const ::libc::c_void,
                             length: size_t, exception: *mut ExceptionInfo)
     -> ::libc::c_long;
    pub fn DeleteMagickRegistry(id: ::libc::c_long) -> ::libc::c_uint;
    pub fn GetMagickRegistry(id: ::libc::c_long, _type: *mut RegistryType,
                             length: *mut size_t,
                             exception: *mut ExceptionInfo)
     -> *mut ::libc::c_void;
    pub fn MagnifyImage(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> *mut Image;
    pub fn MinifyImage(arg1: *const Image, arg2: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ResizeImage(arg1: *const Image, arg2: ::libc::c_ulong,
                       arg3: ::libc::c_ulong, arg4: FilterTypes,
                       arg5: ::libc::c_double, arg6: *mut ExceptionInfo)
     -> *mut Image;
    pub fn SampleImage(arg1: *const Image, arg2: ::libc::c_ulong,
                       arg3: ::libc::c_ulong, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ScaleImage(arg1: *const Image, arg2: ::libc::c_ulong,
                      arg3: ::libc::c_ulong, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ThumbnailImage(arg1: *const Image, arg2: ::libc::c_ulong,
                          arg3: ::libc::c_ulong, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ZoomImage(arg1: *const Image, arg2: ::libc::c_ulong,
                     arg3: ::libc::c_ulong, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn AcquireMagickResource(_type: ResourceType, size: magick_uint64_t)
     -> ::libc::c_uint;
    pub fn ListMagickResourceInfo(file: *mut FILE,
                                  exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn SetMagickResourceLimit(_type: ResourceType, limit: magick_int64_t)
     -> ::libc::c_uint;
    pub fn GetMagickResource(_type: ResourceType) -> magick_int64_t;
    pub fn GetMagickResourceLimit(_type: ResourceType) -> magick_int64_t;
    pub fn DestroyMagickResources() -> ();
    pub fn InitializeMagickResources() -> ();
    pub fn LiberateMagickResource(_type: ResourceType, size: magick_uint64_t)
     -> ();
    pub fn AffineTransformImage(arg1: *const Image, arg2: *const AffineMatrix,
                                arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn AutoOrientImage(image: *const Image,
                           current_orientation: OrientationType,
                           exception: *mut ExceptionInfo) -> *mut Image;
    pub fn RotateImage(arg1: *const Image, arg2: ::libc::c_double,
                       arg3: *mut ExceptionInfo) -> *mut Image;
    pub fn ShearImage(arg1: *const Image, arg2: ::libc::c_double,
                      arg3: ::libc::c_double, arg4: *mut ExceptionInfo)
     -> *mut Image;
    pub fn SignatureImage(arg1: *mut Image) -> ::libc::c_uint;
    pub fn FinalizeSignature(arg1: *mut SignatureInfo) -> ();
    pub fn GetSignatureInfo(arg1: *mut SignatureInfo) -> ();
    pub fn TransformSignature(arg1: *mut SignatureInfo) -> ();
    pub fn UpdateSignature(arg1: *mut SignatureInfo,
                           arg2: *const ::libc::c_uchar, arg3: size_t) -> ();
    pub fn GetImageStatistics(image: *const Image,
                              statistics: *mut ImageStatistics,
                              exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn TextureImage(arg1: *mut Image, arg2: *const Image)
     -> ::libc::c_uint;
    pub fn ChopImage(image: *const Image, chop_info: *const RectangleInfo,
                     exception: *mut ExceptionInfo) -> *mut Image;
    pub fn CoalesceImages(image: *const Image, exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn CropImage(image: *const Image, geometry: *const RectangleInfo,
                     exception: *mut ExceptionInfo) -> *mut Image;
    pub fn DeconstructImages(image: *const Image,
                             exception: *mut ExceptionInfo) -> *mut Image;
    pub fn ExtentImage(image: *const Image, geometry: *const RectangleInfo,
                       exception: *mut ExceptionInfo) -> *mut Image;
    pub fn FlattenImages(image: *const Image, exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn FlipImage(image: *const Image, exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn FlopImage(image: *const Image, exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn MosaicImages(image: *const Image, exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn RollImage(image: *const Image, x_offset: ::libc::c_long,
                     y_offset: ::libc::c_long, exception: *mut ExceptionInfo)
     -> *mut Image;
    pub fn ShaveImage(image: *const Image, shave_info: *const RectangleInfo,
                      exception: *mut ExceptionInfo) -> *mut Image;
    pub fn TransformImage(arg1: *mut *mut Image, arg2: *const ::libc::c_char,
                          arg3: *const ::libc::c_char) -> ();
    pub fn AcquireString(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn AllocateString(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn Base64Encode(arg1: *const ::libc::c_uchar, arg2: size_t,
                        arg3: *mut size_t) -> *mut ::libc::c_char;
    pub fn EscapeString(arg1: *const ::libc::c_char, arg2: ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn GetPageGeometry(arg1: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ListFiles(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                     arg3: *mut ::libc::c_long) -> *mut *mut ::libc::c_char;
    pub fn StringToArgv(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_int)
     -> *mut *mut ::libc::c_char;
    pub fn StringToList(arg1: *const ::libc::c_char)
     -> *mut *mut ::libc::c_char;
    pub fn TranslateText(arg1: *const ImageInfo, arg2: *mut Image,
                         arg3: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn TranslateTextEx(arg1: *const ImageInfo, arg2: *mut Image,
                           arg3: *const ::libc::c_char,
                           arg4: MagickTextTranslate) -> *mut ::libc::c_char;
    pub fn GetClientFilename() -> *const ::libc::c_char;
    pub fn GetClientName() -> *const ::libc::c_char;
    pub fn GetClientPath() -> *const ::libc::c_char;
    pub fn SetClientFilename(arg1: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn SetClientName(arg1: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn SetClientPath(arg1: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn StringToDouble(arg1: *const ::libc::c_char, arg2: ::libc::c_double)
     -> ::libc::c_double;
    pub fn GetGeometry(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_long,
                       arg3: *mut ::libc::c_long, arg4: *mut ::libc::c_ulong,
                       arg5: *mut ::libc::c_ulong) -> ::libc::c_int;
    pub fn GlobExpression(arg1: *const ::libc::c_char,
                          arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn LocaleNCompare(arg1: *const ::libc::c_char,
                          arg2: *const ::libc::c_char, arg3: size_t)
     -> ::libc::c_int;
    pub fn LocaleCompare(arg1: *const ::libc::c_char,
                         arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn GetMagickDimension(str: *const ::libc::c_char,
                              width: *mut ::libc::c_double,
                              height: *mut ::libc::c_double,
                              xoff: *mut ::libc::c_double,
                              yoff: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn GetMagickGeometry(geometry: *const ::libc::c_char,
                             x: *mut ::libc::c_long, y: *mut ::libc::c_long,
                             width: *mut ::libc::c_ulong,
                             height: *mut ::libc::c_ulong) -> ::libc::c_int;
    pub fn MagickRandReentrant(seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn MagickSpawnVP(verbose: ::libc::c_uint, file: *const ::libc::c_char,
                         argv: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn SystemCommand(arg1: ::libc::c_uint, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn Tokenizer(arg1: *mut TokenInfo, arg2: ::libc::c_uint,
                     arg3: *mut ::libc::c_char, arg4: size_t,
                     arg5: *mut ::libc::c_char, arg6: *mut ::libc::c_char,
                     arg7: *mut ::libc::c_char, arg8: *mut ::libc::c_char,
                     arg9: ::libc::c_char, arg10: *mut ::libc::c_char,
                     arg11: *mut ::libc::c_int, arg12: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn MagickRandNewSeed() -> ::libc::c_uint;
    pub fn Base64Decode(arg1: *const ::libc::c_char, arg2: *mut size_t)
     -> *mut ::libc::c_uchar;
    pub fn CloneString(arg1: *mut *mut ::libc::c_char,
                       arg2: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn ConcatenateString(arg1: *mut *mut ::libc::c_char,
                             arg2: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn ExpandFilenames(arg1: *mut ::libc::c_int,
                           arg2: *mut *mut *mut ::libc::c_char)
     -> ::libc::c_uint;
    pub fn GetExecutionPath(arg1: *mut ::libc::c_char) -> ::libc::c_uint;
    pub fn GetExecutionPathUsingName(arg1: *mut ::libc::c_char)
     -> ::libc::c_uint;
    pub fn MagickCreateDirectoryPath(dir: *const ::libc::c_char,
                                     exception: *mut ExceptionInfo)
     -> ::libc::c_uint;
    pub fn IsAccessible(arg1: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn IsAccessibleNoLogging(arg1: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn IsAccessibleAndNotEmpty(arg1: *const ::libc::c_char)
     -> ::libc::c_uint;
    pub fn IsGeometry(arg1: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn IsGlob(arg1: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn IsWriteable(arg1: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn MagickSceneFileName(filename: *mut ::libc::c_char,
                               filename_template: *const ::libc::c_char,
                               scene_template: *const ::libc::c_char,
                               force: ::libc::c_uint, scene: ::libc::c_ulong)
     -> ::libc::c_uint;
    pub fn SubstituteString(buffer: *mut *mut ::libc::c_char,
                            search: *const ::libc::c_char,
                            replace: *const ::libc::c_char) -> ::libc::c_uint;
    pub fn MultilineCensus(arg1: *const ::libc::c_char) -> ::libc::c_ulong;
    pub fn AppendImageFormat(arg1: *const ::libc::c_char,
                             arg2: *mut ::libc::c_char) -> ();
    pub fn DefineClientName(arg1: *const ::libc::c_char) -> ();
    pub fn DefineClientPathAndName(arg1: *const ::libc::c_char) -> ();
    pub fn ExpandFilename(arg1: *mut ::libc::c_char) -> ();
    pub fn FormatSize(size: magick_int64_t, format: *mut ::libc::c_char)
     -> ();
    pub fn GetPathComponent(arg1: *const ::libc::c_char, arg2: PathType,
                            arg3: *mut ::libc::c_char) -> ();
    pub fn GetToken(arg1: *const ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char, arg3: *mut ::libc::c_char)
     -> ();
    pub fn LocaleLower(arg1: *mut ::libc::c_char) -> ();
    pub fn LocaleUpper(arg1: *mut ::libc::c_char) -> ();
    pub fn Strip(arg1: *mut ::libc::c_char) -> ();
    pub fn SetGeometry(arg1: *const Image, arg2: *mut RectangleInfo) -> ();
    pub fn FormatString(string: *mut ::libc::c_char,
                        format: *const ::libc::c_char, ...) -> ();
    pub fn FormatStringList(string: *mut ::libc::c_char,
                            format: *const ::libc::c_char, operands: va_list)
     -> ();
    pub fn MagickFormatString(string: *mut ::libc::c_char, length: size_t,
                              format: *const ::libc::c_char, ...) -> ();
    pub fn MagickFormatStringList(string: *mut ::libc::c_char, length: size_t,
                                  format: *const ::libc::c_char,
                                  operands: va_list) -> ();
    pub fn MagickSizeStrToInt64(str: *const ::libc::c_char,
                                kilo: ::libc::c_uint) -> magick_int64_t;
    pub fn MagickStripSpacesFromString(string: *mut ::libc::c_char) -> size_t;
    pub fn MagickStrlCat(dst: *mut ::libc::c_char, src: *const ::libc::c_char,
                         size: size_t) -> size_t;
    pub fn MagickStrlCpy(dst: *mut ::libc::c_char, src: *const ::libc::c_char,
                         size: size_t) -> size_t;
    pub fn MagickStrlCpyTrunc(dst: *mut ::libc::c_char,
                              src: *const ::libc::c_char, size: size_t)
     -> size_t;
    pub fn GetMagickCopyright() -> *const ::libc::c_char;
    pub fn GetMagickVersion(arg1: *mut ::libc::c_ulong)
     -> *const ::libc::c_char;
    pub fn GetMagickWebSite() -> *const ::libc::c_char;
}
